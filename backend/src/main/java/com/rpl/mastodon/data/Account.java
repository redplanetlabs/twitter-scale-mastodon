/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Account implements org.apache.thrift.TBase<Account, Account._Fields>, java.io.Serializable, Cloneable, Comparable<Account> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Account");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PWD_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdHash", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BIO_FIELD_DESC = new org.apache.thrift.protocol.TField("bio", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField BOT_FIELD_DESC = new org.apache.thrift.protocol.TField("bot", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField DISCOVERABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("discoverable", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField MARKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("markers", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField PREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("preferences", org.apache.thrift.protocol.TType.MAP, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AccountTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pwdHash; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locale; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String publicKey; // required
  public @org.apache.thrift.annotation.Nullable AccountContent content; // required
  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String displayName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String bio; // optional
  public boolean locked; // optional
  public boolean bot; // optional
  public boolean discoverable; // optional
  public @org.apache.thrift.annotation.Nullable AttachmentWithId header; // optional
  public @org.apache.thrift.annotation.Nullable AttachmentWithId avatar; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<KeyValuePair> fields; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,Marker> markers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> preferences; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    EMAIL((short)2, "email"),
    PWD_HASH((short)3, "pwdHash"),
    LOCALE((short)4, "locale"),
    UUID((short)5, "uuid"),
    PUBLIC_KEY((short)6, "publicKey"),
    CONTENT((short)7, "content"),
    TIMESTAMP((short)8, "timestamp"),
    DISPLAY_NAME((short)9, "displayName"),
    BIO((short)10, "bio"),
    LOCKED((short)11, "locked"),
    BOT((short)12, "bot"),
    DISCOVERABLE((short)13, "discoverable"),
    HEADER((short)14, "header"),
    AVATAR((short)15, "avatar"),
    FIELDS((short)16, "fields"),
    MARKERS((short)17, "markers"),
    PREFERENCES((short)18, "preferences");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // EMAIL
          return EMAIL;
        case 3: // PWD_HASH
          return PWD_HASH;
        case 4: // LOCALE
          return LOCALE;
        case 5: // UUID
          return UUID;
        case 6: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 7: // CONTENT
          return CONTENT;
        case 8: // TIMESTAMP
          return TIMESTAMP;
        case 9: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 10: // BIO
          return BIO;
        case 11: // LOCKED
          return LOCKED;
        case 12: // BOT
          return BOT;
        case 13: // DISCOVERABLE
          return DISCOVERABLE;
        case 14: // HEADER
          return HEADER;
        case 15: // AVATAR
          return AVATAR;
        case 16: // FIELDS
          return FIELDS;
        case 17: // MARKERS
          return MARKERS;
        case 18: // PREFERENCES
          return PREFERENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __LOCKED_ISSET_ID = 1;
  private static final int __BOT_ISSET_ID = 2;
  private static final int __DISCOVERABLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DISPLAY_NAME,_Fields.BIO,_Fields.LOCKED,_Fields.BOT,_Fields.DISCOVERABLE,_Fields.HEADER,_Fields.AVATAR,_Fields.FIELDS,_Fields.MARKERS,_Fields.PREFERENCES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PWD_HASH, new org.apache.thrift.meta_data.FieldMetaData("pwdHash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountContent.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIO, new org.apache.thrift.meta_data.FieldMetaData("bio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOT, new org.apache.thrift.meta_data.FieldMetaData("bot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISCOVERABLE, new org.apache.thrift.meta_data.FieldMetaData("discoverable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttachmentWithId.class)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttachmentWithId.class)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValuePair.class))));
    tmpMap.put(_Fields.MARKERS, new org.apache.thrift.meta_data.FieldMetaData("markers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Marker.class))));
    tmpMap.put(_Fields.PREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("preferences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Account.class, metaDataMap);
  }

  public Account() {
  }

  public Account(
    java.lang.String name,
    java.lang.String email,
    java.lang.String pwdHash,
    java.lang.String locale,
    java.lang.String uuid,
    java.lang.String publicKey,
    AccountContent content,
    long timestamp)
  {
    this();
    this.name = name;
    this.email = email;
    this.pwdHash = pwdHash;
    this.locale = locale;
    this.uuid = uuid;
    this.publicKey = publicKey;
    this.content = content;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Account(Account other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPwdHash()) {
      this.pwdHash = other.pwdHash;
    }
    if (other.isSetLocale()) {
      this.locale = other.locale;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetPublicKey()) {
      this.publicKey = other.publicKey;
    }
    if (other.isSetContent()) {
      this.content = new AccountContent(other.content);
    }
    this.timestamp = other.timestamp;
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetBio()) {
      this.bio = other.bio;
    }
    this.locked = other.locked;
    this.bot = other.bot;
    this.discoverable = other.discoverable;
    if (other.isSetHeader()) {
      this.header = new AttachmentWithId(other.header);
    }
    if (other.isSetAvatar()) {
      this.avatar = new AttachmentWithId(other.avatar);
    }
    if (other.isSetFields()) {
      java.util.List<KeyValuePair> __this__fields = new java.util.ArrayList<KeyValuePair>(other.fields.size());
      for (KeyValuePair other_element : other.fields) {
        __this__fields.add(new KeyValuePair(other_element));
      }
      this.fields = __this__fields;
    }
    if (other.isSetMarkers()) {
      java.util.Map<java.lang.String,Marker> __this__markers = new java.util.HashMap<java.lang.String,Marker>(other.markers.size());
      for (java.util.Map.Entry<java.lang.String, Marker> other_element : other.markers.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        Marker other_element_value = other_element.getValue();

        java.lang.String __this__markers_copy_key = other_element_key;

        Marker __this__markers_copy_value = new Marker(other_element_value);

        __this__markers.put(__this__markers_copy_key, __this__markers_copy_value);
      }
      this.markers = __this__markers;
    }
    if (other.isSetPreferences()) {
      java.util.Map<java.lang.String,java.lang.String> __this__preferences = new java.util.HashMap<java.lang.String,java.lang.String>(other.preferences);
      this.preferences = __this__preferences;
    }
  }

  @Override
  public Account deepCopy() {
    return new Account(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.email = null;
    this.pwdHash = null;
    this.locale = null;
    this.uuid = null;
    this.publicKey = null;
    this.content = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.displayName = null;
    this.bio = null;
    setLockedIsSet(false);
    this.locked = false;
    setBotIsSet(false);
    this.bot = false;
    setDiscoverableIsSet(false);
    this.discoverable = false;
    this.header = null;
    this.avatar = null;
    this.fields = null;
    this.markers = null;
    this.preferences = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public Account setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public Account setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPwdHash() {
    return this.pwdHash;
  }

  public Account setPwdHash(@org.apache.thrift.annotation.Nullable java.lang.String pwdHash) {
    this.pwdHash = pwdHash;
    return this;
  }

  public void unsetPwdHash() {
    this.pwdHash = null;
  }

  /** Returns true if field pwdHash is set (has been assigned a value) and false otherwise */
  public boolean isSetPwdHash() {
    return this.pwdHash != null;
  }

  public void setPwdHashIsSet(boolean value) {
    if (!value) {
      this.pwdHash = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocale() {
    return this.locale;
  }

  public Account setLocale(@org.apache.thrift.annotation.Nullable java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  public void unsetLocale() {
    this.locale = null;
  }

  /** Returns true if field locale is set (has been assigned a value) and false otherwise */
  public boolean isSetLocale() {
    return this.locale != null;
  }

  public void setLocaleIsSet(boolean value) {
    if (!value) {
      this.locale = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUuid() {
    return this.uuid;
  }

  public Account setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPublicKey() {
    return this.publicKey;
  }

  public Account setPublicKey(@org.apache.thrift.annotation.Nullable java.lang.String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public AccountContent getContent() {
    return this.content;
  }

  public Account setContent(@org.apache.thrift.annotation.Nullable AccountContent content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Account setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDisplayName() {
    return this.displayName;
  }

  public Account setDisplayName(@org.apache.thrift.annotation.Nullable java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBio() {
    return this.bio;
  }

  public Account setBio(@org.apache.thrift.annotation.Nullable java.lang.String bio) {
    this.bio = bio;
    return this;
  }

  public void unsetBio() {
    this.bio = null;
  }

  /** Returns true if field bio is set (has been assigned a value) and false otherwise */
  public boolean isSetBio() {
    return this.bio != null;
  }

  public void setBioIsSet(boolean value) {
    if (!value) {
      this.bio = null;
    }
  }

  public boolean isLocked() {
    return this.locked;
  }

  public Account setLocked(boolean locked) {
    this.locked = locked;
    setLockedIsSet(true);
    return this;
  }

  public void unsetLocked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  public void setLockedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKED_ISSET_ID, value);
  }

  public boolean isBot() {
    return this.bot;
  }

  public Account setBot(boolean bot) {
    this.bot = bot;
    setBotIsSet(true);
    return this;
  }

  public void unsetBot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOT_ISSET_ID);
  }

  /** Returns true if field bot is set (has been assigned a value) and false otherwise */
  public boolean isSetBot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOT_ISSET_ID);
  }

  public void setBotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOT_ISSET_ID, value);
  }

  public boolean isDiscoverable() {
    return this.discoverable;
  }

  public Account setDiscoverable(boolean discoverable) {
    this.discoverable = discoverable;
    setDiscoverableIsSet(true);
    return this;
  }

  public void unsetDiscoverable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCOVERABLE_ISSET_ID);
  }

  /** Returns true if field discoverable is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscoverable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCOVERABLE_ISSET_ID);
  }

  public void setDiscoverableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCOVERABLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public AttachmentWithId getHeader() {
    return this.header;
  }

  public Account setHeader(@org.apache.thrift.annotation.Nullable AttachmentWithId header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public AttachmentWithId getAvatar() {
    return this.avatar;
  }

  public Account setAvatar(@org.apache.thrift.annotation.Nullable AttachmentWithId avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<KeyValuePair> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(KeyValuePair elem) {
    if (this.fields == null) {
      this.fields = new java.util.ArrayList<KeyValuePair>();
    }
    this.fields.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<KeyValuePair> getFields() {
    return this.fields;
  }

  public Account setFields(@org.apache.thrift.annotation.Nullable java.util.List<KeyValuePair> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public int getMarkersSize() {
    return (this.markers == null) ? 0 : this.markers.size();
  }

  public void putToMarkers(java.lang.String key, Marker val) {
    if (this.markers == null) {
      this.markers = new java.util.HashMap<java.lang.String,Marker>();
    }
    this.markers.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,Marker> getMarkers() {
    return this.markers;
  }

  public Account setMarkers(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,Marker> markers) {
    this.markers = markers;
    return this;
  }

  public void unsetMarkers() {
    this.markers = null;
  }

  /** Returns true if field markers is set (has been assigned a value) and false otherwise */
  public boolean isSetMarkers() {
    return this.markers != null;
  }

  public void setMarkersIsSet(boolean value) {
    if (!value) {
      this.markers = null;
    }
  }

  public int getPreferencesSize() {
    return (this.preferences == null) ? 0 : this.preferences.size();
  }

  public void putToPreferences(java.lang.String key, java.lang.String val) {
    if (this.preferences == null) {
      this.preferences = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.preferences.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getPreferences() {
    return this.preferences;
  }

  public Account setPreferences(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> preferences) {
    this.preferences = preferences;
    return this;
  }

  public void unsetPreferences() {
    this.preferences = null;
  }

  /** Returns true if field preferences is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferences() {
    return this.preferences != null;
  }

  public void setPreferencesIsSet(boolean value) {
    if (!value) {
      this.preferences = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case PWD_HASH:
      if (value == null) {
        unsetPwdHash();
      } else {
        setPwdHash((java.lang.String)value);
      }
      break;

    case LOCALE:
      if (value == null) {
        unsetLocale();
      } else {
        setLocale((java.lang.String)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        setPublicKey((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((AccountContent)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((java.lang.String)value);
      }
      break;

    case BIO:
      if (value == null) {
        unsetBio();
      } else {
        setBio((java.lang.String)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((java.lang.Boolean)value);
      }
      break;

    case BOT:
      if (value == null) {
        unsetBot();
      } else {
        setBot((java.lang.Boolean)value);
      }
      break;

    case DISCOVERABLE:
      if (value == null) {
        unsetDiscoverable();
      } else {
        setDiscoverable((java.lang.Boolean)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((AttachmentWithId)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((AttachmentWithId)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((java.util.List<KeyValuePair>)value);
      }
      break;

    case MARKERS:
      if (value == null) {
        unsetMarkers();
      } else {
        setMarkers((java.util.Map<java.lang.String,Marker>)value);
      }
      break;

    case PREFERENCES:
      if (value == null) {
        unsetPreferences();
      } else {
        setPreferences((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case EMAIL:
      return getEmail();

    case PWD_HASH:
      return getPwdHash();

    case LOCALE:
      return getLocale();

    case UUID:
      return getUuid();

    case PUBLIC_KEY:
      return getPublicKey();

    case CONTENT:
      return getContent();

    case TIMESTAMP:
      return getTimestamp();

    case DISPLAY_NAME:
      return getDisplayName();

    case BIO:
      return getBio();

    case LOCKED:
      return isLocked();

    case BOT:
      return isBot();

    case DISCOVERABLE:
      return isDiscoverable();

    case HEADER:
      return getHeader();

    case AVATAR:
      return getAvatar();

    case FIELDS:
      return getFields();

    case MARKERS:
      return getMarkers();

    case PREFERENCES:
      return getPreferences();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case EMAIL:
      return isSetEmail();
    case PWD_HASH:
      return isSetPwdHash();
    case LOCALE:
      return isSetLocale();
    case UUID:
      return isSetUuid();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case CONTENT:
      return isSetContent();
    case TIMESTAMP:
      return isSetTimestamp();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case BIO:
      return isSetBio();
    case LOCKED:
      return isSetLocked();
    case BOT:
      return isSetBot();
    case DISCOVERABLE:
      return isSetDiscoverable();
    case HEADER:
      return isSetHeader();
    case AVATAR:
      return isSetAvatar();
    case FIELDS:
      return isSetFields();
    case MARKERS:
      return isSetMarkers();
    case PREFERENCES:
      return isSetPreferences();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Account)
      return this.equals((Account)that);
    return false;
  }

  public boolean equals(Account that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_pwdHash = true && this.isSetPwdHash();
    boolean that_present_pwdHash = true && that.isSetPwdHash();
    if (this_present_pwdHash || that_present_pwdHash) {
      if (!(this_present_pwdHash && that_present_pwdHash))
        return false;
      if (!this.pwdHash.equals(that.pwdHash))
        return false;
    }

    boolean this_present_locale = true && this.isSetLocale();
    boolean that_present_locale = true && that.isSetLocale();
    if (this_present_locale || that_present_locale) {
      if (!(this_present_locale && that_present_locale))
        return false;
      if (!this.locale.equals(that.locale))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_bio = true && this.isSetBio();
    boolean that_present_bio = true && that.isSetBio();
    if (this_present_bio || that_present_bio) {
      if (!(this_present_bio && that_present_bio))
        return false;
      if (!this.bio.equals(that.bio))
        return false;
    }

    boolean this_present_locked = true && this.isSetLocked();
    boolean that_present_locked = true && that.isSetLocked();
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (this.locked != that.locked)
        return false;
    }

    boolean this_present_bot = true && this.isSetBot();
    boolean that_present_bot = true && that.isSetBot();
    if (this_present_bot || that_present_bot) {
      if (!(this_present_bot && that_present_bot))
        return false;
      if (this.bot != that.bot)
        return false;
    }

    boolean this_present_discoverable = true && this.isSetDiscoverable();
    boolean that_present_discoverable = true && that.isSetDiscoverable();
    if (this_present_discoverable || that_present_discoverable) {
      if (!(this_present_discoverable && that_present_discoverable))
        return false;
      if (this.discoverable != that.discoverable)
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_markers = true && this.isSetMarkers();
    boolean that_present_markers = true && that.isSetMarkers();
    if (this_present_markers || that_present_markers) {
      if (!(this_present_markers && that_present_markers))
        return false;
      if (!this.markers.equals(that.markers))
        return false;
    }

    boolean this_present_preferences = true && this.isSetPreferences();
    boolean that_present_preferences = true && that.isSetPreferences();
    if (this_present_preferences || that_present_preferences) {
      if (!(this_present_preferences && that_present_preferences))
        return false;
      if (!this.preferences.equals(that.preferences))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetPwdHash()) ? 131071 : 524287);
    if (isSetPwdHash())
      hashCode = hashCode * 8191 + pwdHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
    if (isSetLocale())
      hashCode = hashCode * 8191 + locale.hashCode();

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
    if (isSetPublicKey())
      hashCode = hashCode * 8191 + publicKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
    if (isSetDisplayName())
      hashCode = hashCode * 8191 + displayName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBio()) ? 131071 : 524287);
    if (isSetBio())
      hashCode = hashCode * 8191 + bio.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocked()) ? 131071 : 524287);
    if (isSetLocked())
      hashCode = hashCode * 8191 + ((locked) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBot()) ? 131071 : 524287);
    if (isSetBot())
      hashCode = hashCode * 8191 + ((bot) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDiscoverable()) ? 131071 : 524287);
    if (isSetDiscoverable())
      hashCode = hashCode * 8191 + ((discoverable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHeader()) ? 131071 : 524287);
    if (isSetHeader())
      hashCode = hashCode * 8191 + header.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
    if (isSetAvatar())
      hashCode = hashCode * 8191 + avatar.hashCode();

    hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
    if (isSetFields())
      hashCode = hashCode * 8191 + fields.hashCode();

    hashCode = hashCode * 8191 + ((isSetMarkers()) ? 131071 : 524287);
    if (isSetMarkers())
      hashCode = hashCode * 8191 + markers.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreferences()) ? 131071 : 524287);
    if (isSetPreferences())
      hashCode = hashCode * 8191 + preferences.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Account other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEmail(), other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPwdHash(), other.isSetPwdHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwdHash, other.pwdHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocale(), other.isSetLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPublicKey(), other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisplayName(), other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBio(), other.isSetBio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bio, other.bio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocked(), other.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, other.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBot(), other.isSetBot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bot, other.bot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDiscoverable(), other.isSetDiscoverable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscoverable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discoverable, other.discoverable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHeader(), other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAvatar(), other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFields(), other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMarkers(), other.isSetMarkers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarkers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.markers, other.markers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPreferences(), other.isSetPreferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferences, other.preferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Account(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwdHash:");
    if (this.pwdHash == null) {
      sb.append("null");
    } else {
      sb.append(this.pwdHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locale:");
    if (this.locale == null) {
      sb.append("null");
    } else {
      sb.append(this.locale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      sb.append(this.publicKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetDisplayName()) {
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
    }
    if (isSetBio()) {
      if (!first) sb.append(", ");
      sb.append("bio:");
      if (this.bio == null) {
        sb.append("null");
      } else {
        sb.append(this.bio);
      }
      first = false;
    }
    if (isSetLocked()) {
      if (!first) sb.append(", ");
      sb.append("locked:");
      sb.append(this.locked);
      first = false;
    }
    if (isSetBot()) {
      if (!first) sb.append(", ");
      sb.append("bot:");
      sb.append(this.bot);
      first = false;
    }
    if (isSetDiscoverable()) {
      if (!first) sb.append(", ");
      sb.append("discoverable:");
      sb.append(this.discoverable);
      first = false;
    }
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (isSetMarkers()) {
      if (!first) sb.append(", ");
      sb.append("markers:");
      if (this.markers == null) {
        sb.append("null");
      } else {
        sb.append(this.markers);
      }
      first = false;
    }
    if (isSetPreferences()) {
      if (!first) sb.append(", ");
      sb.append("preferences:");
      if (this.preferences == null) {
        sb.append("null");
      } else {
        sb.append(this.preferences);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (email == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'email' was not present! Struct: " + toString());
    }
    if (pwdHash == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pwdHash' was not present! Struct: " + toString());
    }
    if (locale == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locale' was not present! Struct: " + toString());
    }
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (publicKey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'publicKey' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
    if (avatar != null) {
      avatar.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountStandardScheme getScheme() {
      return new AccountStandardScheme();
    }
  }

  private static class AccountStandardScheme extends org.apache.thrift.scheme.StandardScheme<Account> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Account struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PWD_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwdHash = iprot.readString();
              struct.setPwdHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locale = iprot.readString();
              struct.setLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readString();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.content = new AccountContent();
              struct.content.read(iprot);
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bio = iprot.readString();
              struct.setBioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.locked = iprot.readBool();
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bot = iprot.readBool();
              struct.setBotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DISCOVERABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.discoverable = iprot.readBool();
              struct.setDiscoverableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new AttachmentWithId();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.avatar = new AttachmentWithId();
              struct.avatar.read(iprot);
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fields = new java.util.ArrayList<KeyValuePair>(_list0.size);
                @org.apache.thrift.annotation.Nullable KeyValuePair _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new KeyValuePair();
                  _elem1.read(iprot);
                  struct.fields.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MARKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.markers = new java.util.HashMap<java.lang.String,Marker>(2*_map3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key4;
                @org.apache.thrift.annotation.Nullable Marker _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = new Marker();
                  _val5.read(iprot);
                  struct.markers.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setMarkersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PREFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map7 = iprot.readMapBegin();
                struct.preferences = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map7.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key8;
                @org.apache.thrift.annotation.Nullable java.lang.String _val9;
                for (int _i10 = 0; _i10 < _map7.size; ++_i10)
                {
                  _key8 = iprot.readString();
                  _val9 = iprot.readString();
                  struct.preferences.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setPreferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Account struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.pwdHash != null) {
        oprot.writeFieldBegin(PWD_HASH_FIELD_DESC);
        oprot.writeString(struct.pwdHash);
        oprot.writeFieldEnd();
      }
      if (struct.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(struct.locale);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeString(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        struct.content.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.displayName != null) {
        if (struct.isSetDisplayName()) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bio != null) {
        if (struct.isSetBio()) {
          oprot.writeFieldBegin(BIO_FIELD_DESC);
          oprot.writeString(struct.bio);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLocked()) {
        oprot.writeFieldBegin(LOCKED_FIELD_DESC);
        oprot.writeBool(struct.locked);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBot()) {
        oprot.writeFieldBegin(BOT_FIELD_DESC);
        oprot.writeBool(struct.bot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscoverable()) {
        oprot.writeFieldBegin(DISCOVERABLE_FIELD_DESC);
        oprot.writeBool(struct.discoverable);
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          struct.avatar.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fields.size()));
            for (KeyValuePair _iter11 : struct.fields)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.markers != null) {
        if (struct.isSetMarkers()) {
          oprot.writeFieldBegin(MARKERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.markers.size()));
            for (java.util.Map.Entry<java.lang.String, Marker> _iter12 : struct.markers.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preferences != null) {
        if (struct.isSetPreferences()) {
          oprot.writeFieldBegin(PREFERENCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.preferences.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter13 : struct.preferences.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountTupleScheme getScheme() {
      return new AccountTupleScheme();
    }
  }

  private static class AccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<Account> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.email);
      oprot.writeString(struct.pwdHash);
      oprot.writeString(struct.locale);
      oprot.writeString(struct.uuid);
      oprot.writeString(struct.publicKey);
      struct.content.write(oprot);
      oprot.writeI64(struct.timestamp);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDisplayName()) {
        optionals.set(0);
      }
      if (struct.isSetBio()) {
        optionals.set(1);
      }
      if (struct.isSetLocked()) {
        optionals.set(2);
      }
      if (struct.isSetBot()) {
        optionals.set(3);
      }
      if (struct.isSetDiscoverable()) {
        optionals.set(4);
      }
      if (struct.isSetHeader()) {
        optionals.set(5);
      }
      if (struct.isSetAvatar()) {
        optionals.set(6);
      }
      if (struct.isSetFields()) {
        optionals.set(7);
      }
      if (struct.isSetMarkers()) {
        optionals.set(8);
      }
      if (struct.isSetPreferences()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetBio()) {
        oprot.writeString(struct.bio);
      }
      if (struct.isSetLocked()) {
        oprot.writeBool(struct.locked);
      }
      if (struct.isSetBot()) {
        oprot.writeBool(struct.bot);
      }
      if (struct.isSetDiscoverable()) {
        oprot.writeBool(struct.discoverable);
      }
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetAvatar()) {
        struct.avatar.write(oprot);
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (KeyValuePair _iter14 : struct.fields)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetMarkers()) {
        {
          oprot.writeI32(struct.markers.size());
          for (java.util.Map.Entry<java.lang.String, Marker> _iter15 : struct.markers.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPreferences()) {
        {
          oprot.writeI32(struct.preferences.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter16 : struct.preferences.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeString(_iter16.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Account struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.email = iprot.readString();
      struct.setEmailIsSet(true);
      struct.pwdHash = iprot.readString();
      struct.setPwdHashIsSet(true);
      struct.locale = iprot.readString();
      struct.setLocaleIsSet(true);
      struct.uuid = iprot.readString();
      struct.setUuidIsSet(true);
      struct.publicKey = iprot.readString();
      struct.setPublicKeyIsSet(true);
      struct.content = new AccountContent();
      struct.content.read(iprot);
      struct.setContentIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bio = iprot.readString();
        struct.setBioIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locked = iprot.readBool();
        struct.setLockedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bot = iprot.readBool();
        struct.setBotIsSet(true);
      }
      if (incoming.get(4)) {
        struct.discoverable = iprot.readBool();
        struct.setDiscoverableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.header = new AttachmentWithId();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.avatar = new AttachmentWithId();
        struct.avatar.read(iprot);
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list17 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.fields = new java.util.ArrayList<KeyValuePair>(_list17.size);
          @org.apache.thrift.annotation.Nullable KeyValuePair _elem18;
          for (int _i19 = 0; _i19 < _list17.size; ++_i19)
          {
            _elem18 = new KeyValuePair();
            _elem18.read(iprot);
            struct.fields.add(_elem18);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.markers = new java.util.HashMap<java.lang.String,Marker>(2*_map20.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key21;
          @org.apache.thrift.annotation.Nullable Marker _val22;
          for (int _i23 = 0; _i23 < _map20.size; ++_i23)
          {
            _key21 = iprot.readString();
            _val22 = new Marker();
            _val22.read(iprot);
            struct.markers.put(_key21, _val22);
          }
        }
        struct.setMarkersIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.preferences = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map24.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key25;
          @org.apache.thrift.annotation.Nullable java.lang.String _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            struct.preferences.put(_key25, _val26);
          }
        }
        struct.setPreferencesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

