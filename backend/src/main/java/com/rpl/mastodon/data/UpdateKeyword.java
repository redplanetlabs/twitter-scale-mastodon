/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class UpdateKeyword implements org.apache.thrift.TBase<UpdateKeyword, UpdateKeyword._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateKeyword> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateKeyword");

  private static final org.apache.thrift.protocol.TField CURRENT_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("currentWord", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newWord", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WHOLE_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("wholeWord", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateKeywordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateKeywordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String currentWord; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String newWord; // required
  public boolean wholeWord; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT_WORD((short)1, "currentWord"),
    NEW_WORD((short)2, "newWord"),
    WHOLE_WORD((short)3, "wholeWord");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_WORD
          return CURRENT_WORD;
        case 2: // NEW_WORD
          return NEW_WORD;
        case 3: // WHOLE_WORD
          return WHOLE_WORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WHOLEWORD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_WORD, new org.apache.thrift.meta_data.FieldMetaData("currentWord", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_WORD, new org.apache.thrift.meta_data.FieldMetaData("newWord", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHOLE_WORD, new org.apache.thrift.meta_data.FieldMetaData("wholeWord", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateKeyword.class, metaDataMap);
  }

  public UpdateKeyword() {
  }

  public UpdateKeyword(
    java.lang.String currentWord,
    java.lang.String newWord,
    boolean wholeWord)
  {
    this();
    this.currentWord = currentWord;
    this.newWord = newWord;
    this.wholeWord = wholeWord;
    setWholeWordIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateKeyword(UpdateKeyword other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrentWord()) {
      this.currentWord = other.currentWord;
    }
    if (other.isSetNewWord()) {
      this.newWord = other.newWord;
    }
    this.wholeWord = other.wholeWord;
  }

  @Override
  public UpdateKeyword deepCopy() {
    return new UpdateKeyword(this);
  }

  @Override
  public void clear() {
    this.currentWord = null;
    this.newWord = null;
    setWholeWordIsSet(false);
    this.wholeWord = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrentWord() {
    return this.currentWord;
  }

  public UpdateKeyword setCurrentWord(@org.apache.thrift.annotation.Nullable java.lang.String currentWord) {
    this.currentWord = currentWord;
    return this;
  }

  public void unsetCurrentWord() {
    this.currentWord = null;
  }

  /** Returns true if field currentWord is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentWord() {
    return this.currentWord != null;
  }

  public void setCurrentWordIsSet(boolean value) {
    if (!value) {
      this.currentWord = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNewWord() {
    return this.newWord;
  }

  public UpdateKeyword setNewWord(@org.apache.thrift.annotation.Nullable java.lang.String newWord) {
    this.newWord = newWord;
    return this;
  }

  public void unsetNewWord() {
    this.newWord = null;
  }

  /** Returns true if field newWord is set (has been assigned a value) and false otherwise */
  public boolean isSetNewWord() {
    return this.newWord != null;
  }

  public void setNewWordIsSet(boolean value) {
    if (!value) {
      this.newWord = null;
    }
  }

  public boolean isWholeWord() {
    return this.wholeWord;
  }

  public UpdateKeyword setWholeWord(boolean wholeWord) {
    this.wholeWord = wholeWord;
    setWholeWordIsSet(true);
    return this;
  }

  public void unsetWholeWord() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WHOLEWORD_ISSET_ID);
  }

  /** Returns true if field wholeWord is set (has been assigned a value) and false otherwise */
  public boolean isSetWholeWord() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WHOLEWORD_ISSET_ID);
  }

  public void setWholeWordIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WHOLEWORD_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CURRENT_WORD:
      if (value == null) {
        unsetCurrentWord();
      } else {
        setCurrentWord((java.lang.String)value);
      }
      break;

    case NEW_WORD:
      if (value == null) {
        unsetNewWord();
      } else {
        setNewWord((java.lang.String)value);
      }
      break;

    case WHOLE_WORD:
      if (value == null) {
        unsetWholeWord();
      } else {
        setWholeWord((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_WORD:
      return getCurrentWord();

    case NEW_WORD:
      return getNewWord();

    case WHOLE_WORD:
      return isWholeWord();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_WORD:
      return isSetCurrentWord();
    case NEW_WORD:
      return isSetNewWord();
    case WHOLE_WORD:
      return isSetWholeWord();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UpdateKeyword)
      return this.equals((UpdateKeyword)that);
    return false;
  }

  public boolean equals(UpdateKeyword that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_currentWord = true && this.isSetCurrentWord();
    boolean that_present_currentWord = true && that.isSetCurrentWord();
    if (this_present_currentWord || that_present_currentWord) {
      if (!(this_present_currentWord && that_present_currentWord))
        return false;
      if (!this.currentWord.equals(that.currentWord))
        return false;
    }

    boolean this_present_newWord = true && this.isSetNewWord();
    boolean that_present_newWord = true && that.isSetNewWord();
    if (this_present_newWord || that_present_newWord) {
      if (!(this_present_newWord && that_present_newWord))
        return false;
      if (!this.newWord.equals(that.newWord))
        return false;
    }

    boolean this_present_wholeWord = true;
    boolean that_present_wholeWord = true;
    if (this_present_wholeWord || that_present_wholeWord) {
      if (!(this_present_wholeWord && that_present_wholeWord))
        return false;
      if (this.wholeWord != that.wholeWord)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCurrentWord()) ? 131071 : 524287);
    if (isSetCurrentWord())
      hashCode = hashCode * 8191 + currentWord.hashCode();

    hashCode = hashCode * 8191 + ((isSetNewWord()) ? 131071 : 524287);
    if (isSetNewWord())
      hashCode = hashCode * 8191 + newWord.hashCode();

    hashCode = hashCode * 8191 + ((wholeWord) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(UpdateKeyword other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCurrentWord(), other.isSetCurrentWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentWord, other.currentWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNewWord(), other.isSetNewWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newWord, other.newWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWholeWord(), other.isSetWholeWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWholeWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wholeWord, other.wholeWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateKeyword(");
    boolean first = true;

    sb.append("currentWord:");
    if (this.currentWord == null) {
      sb.append("null");
    } else {
      sb.append(this.currentWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newWord:");
    if (this.newWord == null) {
      sb.append("null");
    } else {
      sb.append(this.newWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wholeWord:");
    sb.append(this.wholeWord);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (currentWord == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currentWord' was not present! Struct: " + toString());
    }
    if (newWord == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newWord' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'wholeWord' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateKeywordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UpdateKeywordStandardScheme getScheme() {
      return new UpdateKeywordStandardScheme();
    }
  }

  private static class UpdateKeywordStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateKeyword> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateKeyword struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentWord = iprot.readString();
              struct.setCurrentWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newWord = iprot.readString();
              struct.setNewWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WHOLE_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wholeWord = iprot.readBool();
              struct.setWholeWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetWholeWord()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'wholeWord' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateKeyword struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currentWord != null) {
        oprot.writeFieldBegin(CURRENT_WORD_FIELD_DESC);
        oprot.writeString(struct.currentWord);
        oprot.writeFieldEnd();
      }
      if (struct.newWord != null) {
        oprot.writeFieldBegin(NEW_WORD_FIELD_DESC);
        oprot.writeString(struct.newWord);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WHOLE_WORD_FIELD_DESC);
      oprot.writeBool(struct.wholeWord);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateKeywordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UpdateKeywordTupleScheme getScheme() {
      return new UpdateKeywordTupleScheme();
    }
  }

  private static class UpdateKeywordTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateKeyword> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateKeyword struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.currentWord);
      oprot.writeString(struct.newWord);
      oprot.writeBool(struct.wholeWord);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateKeyword struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.currentWord = iprot.readString();
      struct.setCurrentWordIsSet(true);
      struct.newWord = iprot.readString();
      struct.setNewWordIsSet(true);
      struct.wholeWord = iprot.readBool();
      struct.setWholeWordIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

