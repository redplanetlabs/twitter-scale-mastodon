/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AccountMetadata implements org.apache.thrift.TBase<AccountMetadata, AccountMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<AccountMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountMetadata");

  private static final org.apache.thrift.protocol.TField STATUS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FOLLOWER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followerCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FOLLOWEE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followeeCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_FOLLOWED_BY_REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFollowedByRequester", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_FOLLOWING_REQUESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFollowingRequester", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_STATUS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStatusTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AccountMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AccountMetadataTupleSchemeFactory();

  public int statusCount; // required
  public int followerCount; // required
  public int followeeCount; // required
  public boolean isFollowedByRequester; // required
  public boolean isFollowingRequester; // required
  public long lastStatusTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS_COUNT((short)1, "statusCount"),
    FOLLOWER_COUNT((short)2, "followerCount"),
    FOLLOWEE_COUNT((short)3, "followeeCount"),
    IS_FOLLOWED_BY_REQUESTER((short)4, "isFollowedByRequester"),
    IS_FOLLOWING_REQUESTER((short)5, "isFollowingRequester"),
    LAST_STATUS_TIMESTAMP((short)6, "lastStatusTimestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_COUNT
          return STATUS_COUNT;
        case 2: // FOLLOWER_COUNT
          return FOLLOWER_COUNT;
        case 3: // FOLLOWEE_COUNT
          return FOLLOWEE_COUNT;
        case 4: // IS_FOLLOWED_BY_REQUESTER
          return IS_FOLLOWED_BY_REQUESTER;
        case 5: // IS_FOLLOWING_REQUESTER
          return IS_FOLLOWING_REQUESTER;
        case 6: // LAST_STATUS_TIMESTAMP
          return LAST_STATUS_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUSCOUNT_ISSET_ID = 0;
  private static final int __FOLLOWERCOUNT_ISSET_ID = 1;
  private static final int __FOLLOWEECOUNT_ISSET_ID = 2;
  private static final int __ISFOLLOWEDBYREQUESTER_ISSET_ID = 3;
  private static final int __ISFOLLOWINGREQUESTER_ISSET_ID = 4;
  private static final int __LASTSTATUSTIMESTAMP_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LAST_STATUS_TIMESTAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("statusCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followerCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWEE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followeeCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FOLLOWED_BY_REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("isFollowedByRequester", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FOLLOWING_REQUESTER, new org.apache.thrift.meta_data.FieldMetaData("isFollowingRequester", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_STATUS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastStatusTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountMetadata.class, metaDataMap);
  }

  public AccountMetadata() {
  }

  public AccountMetadata(
    int statusCount,
    int followerCount,
    int followeeCount,
    boolean isFollowedByRequester,
    boolean isFollowingRequester)
  {
    this();
    this.statusCount = statusCount;
    setStatusCountIsSet(true);
    this.followerCount = followerCount;
    setFollowerCountIsSet(true);
    this.followeeCount = followeeCount;
    setFolloweeCountIsSet(true);
    this.isFollowedByRequester = isFollowedByRequester;
    setIsFollowedByRequesterIsSet(true);
    this.isFollowingRequester = isFollowingRequester;
    setIsFollowingRequesterIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountMetadata(AccountMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    this.statusCount = other.statusCount;
    this.followerCount = other.followerCount;
    this.followeeCount = other.followeeCount;
    this.isFollowedByRequester = other.isFollowedByRequester;
    this.isFollowingRequester = other.isFollowingRequester;
    this.lastStatusTimestamp = other.lastStatusTimestamp;
  }

  @Override
  public AccountMetadata deepCopy() {
    return new AccountMetadata(this);
  }

  @Override
  public void clear() {
    setStatusCountIsSet(false);
    this.statusCount = 0;
    setFollowerCountIsSet(false);
    this.followerCount = 0;
    setFolloweeCountIsSet(false);
    this.followeeCount = 0;
    setIsFollowedByRequesterIsSet(false);
    this.isFollowedByRequester = false;
    setIsFollowingRequesterIsSet(false);
    this.isFollowingRequester = false;
    setLastStatusTimestampIsSet(false);
    this.lastStatusTimestamp = 0;
  }

  public int getStatusCount() {
    return this.statusCount;
  }

  public AccountMetadata setStatusCount(int statusCount) {
    this.statusCount = statusCount;
    setStatusCountIsSet(true);
    return this;
  }

  public void unsetStatusCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCOUNT_ISSET_ID);
  }

  /** Returns true if field statusCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCOUNT_ISSET_ID);
  }

  public void setStatusCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCOUNT_ISSET_ID, value);
  }

  public int getFollowerCount() {
    return this.followerCount;
  }

  public AccountMetadata setFollowerCount(int followerCount) {
    this.followerCount = followerCount;
    setFollowerCountIsSet(true);
    return this;
  }

  public void unsetFollowerCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID);
  }

  /** Returns true if field followerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowerCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID);
  }

  public void setFollowerCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLLOWERCOUNT_ISSET_ID, value);
  }

  public int getFolloweeCount() {
    return this.followeeCount;
  }

  public AccountMetadata setFolloweeCount(int followeeCount) {
    this.followeeCount = followeeCount;
    setFolloweeCountIsSet(true);
    return this;
  }

  public void unsetFolloweeCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLLOWEECOUNT_ISSET_ID);
  }

  /** Returns true if field followeeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFolloweeCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLLOWEECOUNT_ISSET_ID);
  }

  public void setFolloweeCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLLOWEECOUNT_ISSET_ID, value);
  }

  public boolean isIsFollowedByRequester() {
    return this.isFollowedByRequester;
  }

  public AccountMetadata setIsFollowedByRequester(boolean isFollowedByRequester) {
    this.isFollowedByRequester = isFollowedByRequester;
    setIsFollowedByRequesterIsSet(true);
    return this;
  }

  public void unsetIsFollowedByRequester() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFOLLOWEDBYREQUESTER_ISSET_ID);
  }

  /** Returns true if field isFollowedByRequester is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFollowedByRequester() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFOLLOWEDBYREQUESTER_ISSET_ID);
  }

  public void setIsFollowedByRequesterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFOLLOWEDBYREQUESTER_ISSET_ID, value);
  }

  public boolean isIsFollowingRequester() {
    return this.isFollowingRequester;
  }

  public AccountMetadata setIsFollowingRequester(boolean isFollowingRequester) {
    this.isFollowingRequester = isFollowingRequester;
    setIsFollowingRequesterIsSet(true);
    return this;
  }

  public void unsetIsFollowingRequester() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFOLLOWINGREQUESTER_ISSET_ID);
  }

  /** Returns true if field isFollowingRequester is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFollowingRequester() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFOLLOWINGREQUESTER_ISSET_ID);
  }

  public void setIsFollowingRequesterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFOLLOWINGREQUESTER_ISSET_ID, value);
  }

  public long getLastStatusTimestamp() {
    return this.lastStatusTimestamp;
  }

  public AccountMetadata setLastStatusTimestamp(long lastStatusTimestamp) {
    this.lastStatusTimestamp = lastStatusTimestamp;
    setLastStatusTimestampIsSet(true);
    return this;
  }

  public void unsetLastStatusTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTSTATUSTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastStatusTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStatusTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTSTATUSTIMESTAMP_ISSET_ID);
  }

  public void setLastStatusTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTSTATUSTIMESTAMP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS_COUNT:
      if (value == null) {
        unsetStatusCount();
      } else {
        setStatusCount((java.lang.Integer)value);
      }
      break;

    case FOLLOWER_COUNT:
      if (value == null) {
        unsetFollowerCount();
      } else {
        setFollowerCount((java.lang.Integer)value);
      }
      break;

    case FOLLOWEE_COUNT:
      if (value == null) {
        unsetFolloweeCount();
      } else {
        setFolloweeCount((java.lang.Integer)value);
      }
      break;

    case IS_FOLLOWED_BY_REQUESTER:
      if (value == null) {
        unsetIsFollowedByRequester();
      } else {
        setIsFollowedByRequester((java.lang.Boolean)value);
      }
      break;

    case IS_FOLLOWING_REQUESTER:
      if (value == null) {
        unsetIsFollowingRequester();
      } else {
        setIsFollowingRequester((java.lang.Boolean)value);
      }
      break;

    case LAST_STATUS_TIMESTAMP:
      if (value == null) {
        unsetLastStatusTimestamp();
      } else {
        setLastStatusTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_COUNT:
      return getStatusCount();

    case FOLLOWER_COUNT:
      return getFollowerCount();

    case FOLLOWEE_COUNT:
      return getFolloweeCount();

    case IS_FOLLOWED_BY_REQUESTER:
      return isIsFollowedByRequester();

    case IS_FOLLOWING_REQUESTER:
      return isIsFollowingRequester();

    case LAST_STATUS_TIMESTAMP:
      return getLastStatusTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS_COUNT:
      return isSetStatusCount();
    case FOLLOWER_COUNT:
      return isSetFollowerCount();
    case FOLLOWEE_COUNT:
      return isSetFolloweeCount();
    case IS_FOLLOWED_BY_REQUESTER:
      return isSetIsFollowedByRequester();
    case IS_FOLLOWING_REQUESTER:
      return isSetIsFollowingRequester();
    case LAST_STATUS_TIMESTAMP:
      return isSetLastStatusTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AccountMetadata)
      return this.equals((AccountMetadata)that);
    return false;
  }

  public boolean equals(AccountMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_statusCount = true;
    boolean that_present_statusCount = true;
    if (this_present_statusCount || that_present_statusCount) {
      if (!(this_present_statusCount && that_present_statusCount))
        return false;
      if (this.statusCount != that.statusCount)
        return false;
    }

    boolean this_present_followerCount = true;
    boolean that_present_followerCount = true;
    if (this_present_followerCount || that_present_followerCount) {
      if (!(this_present_followerCount && that_present_followerCount))
        return false;
      if (this.followerCount != that.followerCount)
        return false;
    }

    boolean this_present_followeeCount = true;
    boolean that_present_followeeCount = true;
    if (this_present_followeeCount || that_present_followeeCount) {
      if (!(this_present_followeeCount && that_present_followeeCount))
        return false;
      if (this.followeeCount != that.followeeCount)
        return false;
    }

    boolean this_present_isFollowedByRequester = true;
    boolean that_present_isFollowedByRequester = true;
    if (this_present_isFollowedByRequester || that_present_isFollowedByRequester) {
      if (!(this_present_isFollowedByRequester && that_present_isFollowedByRequester))
        return false;
      if (this.isFollowedByRequester != that.isFollowedByRequester)
        return false;
    }

    boolean this_present_isFollowingRequester = true;
    boolean that_present_isFollowingRequester = true;
    if (this_present_isFollowingRequester || that_present_isFollowingRequester) {
      if (!(this_present_isFollowingRequester && that_present_isFollowingRequester))
        return false;
      if (this.isFollowingRequester != that.isFollowingRequester)
        return false;
    }

    boolean this_present_lastStatusTimestamp = true && this.isSetLastStatusTimestamp();
    boolean that_present_lastStatusTimestamp = true && that.isSetLastStatusTimestamp();
    if (this_present_lastStatusTimestamp || that_present_lastStatusTimestamp) {
      if (!(this_present_lastStatusTimestamp && that_present_lastStatusTimestamp))
        return false;
      if (this.lastStatusTimestamp != that.lastStatusTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + statusCount;

    hashCode = hashCode * 8191 + followerCount;

    hashCode = hashCode * 8191 + followeeCount;

    hashCode = hashCode * 8191 + ((isFollowedByRequester) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isFollowingRequester) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLastStatusTimestamp()) ? 131071 : 524287);
    if (isSetLastStatusTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastStatusTimestamp);

    return hashCode;
  }

  @Override
  public int compareTo(AccountMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatusCount(), other.isSetStatusCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCount, other.statusCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFollowerCount(), other.isSetFollowerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followerCount, other.followerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFolloweeCount(), other.isSetFolloweeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFolloweeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followeeCount, other.followeeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsFollowedByRequester(), other.isSetIsFollowedByRequester());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFollowedByRequester()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFollowedByRequester, other.isFollowedByRequester);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsFollowingRequester(), other.isSetIsFollowingRequester());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFollowingRequester()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFollowingRequester, other.isFollowingRequester);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLastStatusTimestamp(), other.isSetLastStatusTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStatusTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStatusTimestamp, other.lastStatusTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AccountMetadata(");
    boolean first = true;

    sb.append("statusCount:");
    sb.append(this.statusCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followerCount:");
    sb.append(this.followerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followeeCount:");
    sb.append(this.followeeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFollowedByRequester:");
    sb.append(this.isFollowedByRequester);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFollowingRequester:");
    sb.append(this.isFollowingRequester);
    first = false;
    if (isSetLastStatusTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastStatusTimestamp:");
      sb.append(this.lastStatusTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'statusCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'followerCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'followeeCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isFollowedByRequester' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isFollowingRequester' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountMetadataStandardScheme getScheme() {
      return new AccountMetadataStandardScheme();
    }
  }

  private static class AccountMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<AccountMetadata> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusCount = iprot.readI32();
              struct.setStatusCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOLLOWER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followerCount = iprot.readI32();
              struct.setFollowerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOLLOWEE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followeeCount = iprot.readI32();
              struct.setFolloweeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_FOLLOWED_BY_REQUESTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFollowedByRequester = iprot.readBool();
              struct.setIsFollowedByRequesterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_FOLLOWING_REQUESTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFollowingRequester = iprot.readBool();
              struct.setIsFollowingRequesterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_STATUS_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastStatusTimestamp = iprot.readI64();
              struct.setLastStatusTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatusCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFollowerCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'followerCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFolloweeCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'followeeCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFollowedByRequester()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFollowedByRequester' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFollowingRequester()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFollowingRequester' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.statusCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.followerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWEE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.followeeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLLOWED_BY_REQUESTER_FIELD_DESC);
      oprot.writeBool(struct.isFollowedByRequester);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLLOWING_REQUESTER_FIELD_DESC);
      oprot.writeBool(struct.isFollowingRequester);
      oprot.writeFieldEnd();
      if (struct.isSetLastStatusTimestamp()) {
        oprot.writeFieldBegin(LAST_STATUS_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastStatusTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountMetadataTupleScheme getScheme() {
      return new AccountMetadataTupleScheme();
    }
  }

  private static class AccountMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<AccountMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.statusCount);
      oprot.writeI32(struct.followerCount);
      oprot.writeI32(struct.followeeCount);
      oprot.writeBool(struct.isFollowedByRequester);
      oprot.writeBool(struct.isFollowingRequester);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLastStatusTimestamp()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetLastStatusTimestamp()) {
        oprot.writeI64(struct.lastStatusTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.statusCount = iprot.readI32();
      struct.setStatusCountIsSet(true);
      struct.followerCount = iprot.readI32();
      struct.setFollowerCountIsSet(true);
      struct.followeeCount = iprot.readI32();
      struct.setFolloweeCountIsSet(true);
      struct.isFollowedByRequester = iprot.readBool();
      struct.setIsFollowedByRequesterIsSet(true);
      struct.isFollowingRequester = iprot.readBool();
      struct.setIsFollowingRequesterIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.lastStatusTimestamp = iprot.readI64();
        struct.setLastStatusTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

