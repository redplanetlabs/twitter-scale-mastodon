/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class NormalStatusContent implements org.apache.thrift.TBase<NormalStatusContent, NormalStatusContent._Fields>, java.io.Serializable, Cloneable, Comparable<NormalStatusContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NormalStatusContent");

  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POLL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("pollContent", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SENSITIVE_WARNING_FIELD_DESC = new org.apache.thrift.protocol.TField("sensitiveWarning", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NormalStatusContentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NormalStatusContentTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String text; // required
  /**
   * 
   * @see StatusVisibility
   */
  public @org.apache.thrift.annotation.Nullable StatusVisibility visibility; // required
  public @org.apache.thrift.annotation.Nullable PollContent pollContent; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<AttachmentWithId> attachments; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sensitiveWarning; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT((short)1, "text"),
    /**
     * 
     * @see StatusVisibility
     */
    VISIBILITY((short)2, "visibility"),
    POLL_CONTENT((short)3, "pollContent"),
    ATTACHMENTS((short)4, "attachments"),
    SENSITIVE_WARNING((short)5, "sensitiveWarning");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // VISIBILITY
          return VISIBILITY;
        case 3: // POLL_CONTENT
          return POLL_CONTENT;
        case 4: // ATTACHMENTS
          return ATTACHMENTS;
        case 5: // SENSITIVE_WARNING
          return SENSITIVE_WARNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.POLL_CONTENT,_Fields.ATTACHMENTS,_Fields.SENSITIVE_WARNING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusVisibility.class)));
    tmpMap.put(_Fields.POLL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("pollContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PollContent.class)));
    tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttachmentWithId.class))));
    tmpMap.put(_Fields.SENSITIVE_WARNING, new org.apache.thrift.meta_data.FieldMetaData("sensitiveWarning", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NormalStatusContent.class, metaDataMap);
  }

  public NormalStatusContent() {
  }

  public NormalStatusContent(
    java.lang.String text,
    StatusVisibility visibility)
  {
    this();
    this.text = text;
    this.visibility = visibility;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NormalStatusContent(NormalStatusContent other) {
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetVisibility()) {
      this.visibility = other.visibility;
    }
    if (other.isSetPollContent()) {
      this.pollContent = new PollContent(other.pollContent);
    }
    if (other.isSetAttachments()) {
      java.util.List<AttachmentWithId> __this__attachments = new java.util.ArrayList<AttachmentWithId>(other.attachments.size());
      for (AttachmentWithId other_element : other.attachments) {
        __this__attachments.add(new AttachmentWithId(other_element));
      }
      this.attachments = __this__attachments;
    }
    if (other.isSetSensitiveWarning()) {
      this.sensitiveWarning = other.sensitiveWarning;
    }
  }

  @Override
  public NormalStatusContent deepCopy() {
    return new NormalStatusContent(this);
  }

  @Override
  public void clear() {
    this.text = null;
    this.visibility = null;
    this.pollContent = null;
    this.attachments = null;
    this.sensitiveWarning = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getText() {
    return this.text;
  }

  public NormalStatusContent setText(@org.apache.thrift.annotation.Nullable java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  /**
   * 
   * @see StatusVisibility
   */
  @org.apache.thrift.annotation.Nullable
  public StatusVisibility getVisibility() {
    return this.visibility;
  }

  /**
   * 
   * @see StatusVisibility
   */
  public NormalStatusContent setVisibility(@org.apache.thrift.annotation.Nullable StatusVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PollContent getPollContent() {
    return this.pollContent;
  }

  public NormalStatusContent setPollContent(@org.apache.thrift.annotation.Nullable PollContent pollContent) {
    this.pollContent = pollContent;
    return this;
  }

  public void unsetPollContent() {
    this.pollContent = null;
  }

  /** Returns true if field pollContent is set (has been assigned a value) and false otherwise */
  public boolean isSetPollContent() {
    return this.pollContent != null;
  }

  public void setPollContentIsSet(boolean value) {
    if (!value) {
      this.pollContent = null;
    }
  }

  public int getAttachmentsSize() {
    return (this.attachments == null) ? 0 : this.attachments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<AttachmentWithId> getAttachmentsIterator() {
    return (this.attachments == null) ? null : this.attachments.iterator();
  }

  public void addToAttachments(AttachmentWithId elem) {
    if (this.attachments == null) {
      this.attachments = new java.util.ArrayList<AttachmentWithId>();
    }
    this.attachments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<AttachmentWithId> getAttachments() {
    return this.attachments;
  }

  public NormalStatusContent setAttachments(@org.apache.thrift.annotation.Nullable java.util.List<AttachmentWithId> attachments) {
    this.attachments = attachments;
    return this;
  }

  public void unsetAttachments() {
    this.attachments = null;
  }

  /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachments() {
    return this.attachments != null;
  }

  public void setAttachmentsIsSet(boolean value) {
    if (!value) {
      this.attachments = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSensitiveWarning() {
    return this.sensitiveWarning;
  }

  public NormalStatusContent setSensitiveWarning(@org.apache.thrift.annotation.Nullable java.lang.String sensitiveWarning) {
    this.sensitiveWarning = sensitiveWarning;
    return this;
  }

  public void unsetSensitiveWarning() {
    this.sensitiveWarning = null;
  }

  /** Returns true if field sensitiveWarning is set (has been assigned a value) and false otherwise */
  public boolean isSetSensitiveWarning() {
    return this.sensitiveWarning != null;
  }

  public void setSensitiveWarningIsSet(boolean value) {
    if (!value) {
      this.sensitiveWarning = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((StatusVisibility)value);
      }
      break;

    case POLL_CONTENT:
      if (value == null) {
        unsetPollContent();
      } else {
        setPollContent((PollContent)value);
      }
      break;

    case ATTACHMENTS:
      if (value == null) {
        unsetAttachments();
      } else {
        setAttachments((java.util.List<AttachmentWithId>)value);
      }
      break;

    case SENSITIVE_WARNING:
      if (value == null) {
        unsetSensitiveWarning();
      } else {
        setSensitiveWarning((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TEXT:
      return getText();

    case VISIBILITY:
      return getVisibility();

    case POLL_CONTENT:
      return getPollContent();

    case ATTACHMENTS:
      return getAttachments();

    case SENSITIVE_WARNING:
      return getSensitiveWarning();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TEXT:
      return isSetText();
    case VISIBILITY:
      return isSetVisibility();
    case POLL_CONTENT:
      return isSetPollContent();
    case ATTACHMENTS:
      return isSetAttachments();
    case SENSITIVE_WARNING:
      return isSetSensitiveWarning();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NormalStatusContent)
      return this.equals((NormalStatusContent)that);
    return false;
  }

  public boolean equals(NormalStatusContent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_pollContent = true && this.isSetPollContent();
    boolean that_present_pollContent = true && that.isSetPollContent();
    if (this_present_pollContent || that_present_pollContent) {
      if (!(this_present_pollContent && that_present_pollContent))
        return false;
      if (!this.pollContent.equals(that.pollContent))
        return false;
    }

    boolean this_present_attachments = true && this.isSetAttachments();
    boolean that_present_attachments = true && that.isSetAttachments();
    if (this_present_attachments || that_present_attachments) {
      if (!(this_present_attachments && that_present_attachments))
        return false;
      if (!this.attachments.equals(that.attachments))
        return false;
    }

    boolean this_present_sensitiveWarning = true && this.isSetSensitiveWarning();
    boolean that_present_sensitiveWarning = true && that.isSetSensitiveWarning();
    if (this_present_sensitiveWarning || that_present_sensitiveWarning) {
      if (!(this_present_sensitiveWarning && that_present_sensitiveWarning))
        return false;
      if (!this.sensitiveWarning.equals(that.sensitiveWarning))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + ((isSetVisibility()) ? 131071 : 524287);
    if (isSetVisibility())
      hashCode = hashCode * 8191 + visibility.getValue();

    hashCode = hashCode * 8191 + ((isSetPollContent()) ? 131071 : 524287);
    if (isSetPollContent())
      hashCode = hashCode * 8191 + pollContent.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttachments()) ? 131071 : 524287);
    if (isSetAttachments())
      hashCode = hashCode * 8191 + attachments.hashCode();

    hashCode = hashCode * 8191 + ((isSetSensitiveWarning()) ? 131071 : 524287);
    if (isSetSensitiveWarning())
      hashCode = hashCode * 8191 + sensitiveWarning.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NormalStatusContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetText(), other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisibility(), other.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPollContent(), other.isSetPollContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollContent, other.pollContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAttachments(), other.isSetAttachments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSensitiveWarning(), other.isSetSensitiveWarning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensitiveWarning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensitiveWarning, other.sensitiveWarning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NormalStatusContent(");
    boolean first = true;

    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (isSetPollContent()) {
      if (!first) sb.append(", ");
      sb.append("pollContent:");
      if (this.pollContent == null) {
        sb.append("null");
      } else {
        sb.append(this.pollContent);
      }
      first = false;
    }
    if (isSetAttachments()) {
      if (!first) sb.append(", ");
      sb.append("attachments:");
      if (this.attachments == null) {
        sb.append("null");
      } else {
        sb.append(this.attachments);
      }
      first = false;
    }
    if (isSetSensitiveWarning()) {
      if (!first) sb.append(", ");
      sb.append("sensitiveWarning:");
      if (this.sensitiveWarning == null) {
        sb.append("null");
      } else {
        sb.append(this.sensitiveWarning);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (text == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'text' was not present! Struct: " + toString());
    }
    if (visibility == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'visibility' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (pollContent != null) {
      pollContent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NormalStatusContentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NormalStatusContentStandardScheme getScheme() {
      return new NormalStatusContentStandardScheme();
    }
  }

  private static class NormalStatusContentStandardScheme extends org.apache.thrift.scheme.StandardScheme<NormalStatusContent> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, NormalStatusContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visibility = com.rpl.mastodon.data.StatusVisibility.findByValue(iprot.readI32());
              struct.setVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pollContent = new PollContent();
              struct.pollContent.read(iprot);
              struct.setPollContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTACHMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.attachments = new java.util.ArrayList<AttachmentWithId>(_list104.size);
                @org.apache.thrift.annotation.Nullable AttachmentWithId _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new AttachmentWithId();
                  _elem105.read(iprot);
                  struct.attachments.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setAttachmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SENSITIVE_WARNING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensitiveWarning = iprot.readString();
              struct.setSensitiveWarningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, NormalStatusContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.visibility != null) {
        oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
        oprot.writeI32(struct.visibility.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pollContent != null) {
        if (struct.isSetPollContent()) {
          oprot.writeFieldBegin(POLL_CONTENT_FIELD_DESC);
          struct.pollContent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attachments != null) {
        if (struct.isSetAttachments()) {
          oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
            for (AttachmentWithId _iter107 : struct.attachments)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sensitiveWarning != null) {
        if (struct.isSetSensitiveWarning()) {
          oprot.writeFieldBegin(SENSITIVE_WARNING_FIELD_DESC);
          oprot.writeString(struct.sensitiveWarning);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NormalStatusContentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NormalStatusContentTupleScheme getScheme() {
      return new NormalStatusContentTupleScheme();
    }
  }

  private static class NormalStatusContentTupleScheme extends org.apache.thrift.scheme.TupleScheme<NormalStatusContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NormalStatusContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.text);
      oprot.writeI32(struct.visibility.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPollContent()) {
        optionals.set(0);
      }
      if (struct.isSetAttachments()) {
        optionals.set(1);
      }
      if (struct.isSetSensitiveWarning()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPollContent()) {
        struct.pollContent.write(oprot);
      }
      if (struct.isSetAttachments()) {
        {
          oprot.writeI32(struct.attachments.size());
          for (AttachmentWithId _iter108 : struct.attachments)
          {
            _iter108.write(oprot);
          }
        }
      }
      if (struct.isSetSensitiveWarning()) {
        oprot.writeString(struct.sensitiveWarning);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NormalStatusContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.text = iprot.readString();
      struct.setTextIsSet(true);
      struct.visibility = com.rpl.mastodon.data.StatusVisibility.findByValue(iprot.readI32());
      struct.setVisibilityIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pollContent = new PollContent();
        struct.pollContent.read(iprot);
        struct.setPollContentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list109 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.attachments = new java.util.ArrayList<AttachmentWithId>(_list109.size);
          @org.apache.thrift.annotation.Nullable AttachmentWithId _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new AttachmentWithId();
            _elem110.read(iprot);
            struct.attachments.add(_elem110);
          }
        }
        struct.setAttachmentsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sensitiveWarning = iprot.readString();
        struct.setSensitiveWarningIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

