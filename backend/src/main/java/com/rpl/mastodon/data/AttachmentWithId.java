/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AttachmentWithId implements org.apache.thrift.TBase<AttachmentWithId, AttachmentWithId._Fields>, java.io.Serializable, Cloneable, Comparable<AttachmentWithId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AttachmentWithId");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("attachment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AttachmentWithIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AttachmentWithIdTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
  public @org.apache.thrift.annotation.Nullable Attachment attachment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    ATTACHMENT((short)2, "attachment");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // ATTACHMENT
          return ATTACHMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("attachment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attachment.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AttachmentWithId.class, metaDataMap);
  }

  public AttachmentWithId() {
  }

  public AttachmentWithId(
    java.lang.String uuid,
    Attachment attachment)
  {
    this();
    this.uuid = uuid;
    this.attachment = attachment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AttachmentWithId(AttachmentWithId other) {
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetAttachment()) {
      this.attachment = new Attachment(other.attachment);
    }
  }

  @Override
  public AttachmentWithId deepCopy() {
    return new AttachmentWithId(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.attachment = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUuid() {
    return this.uuid;
  }

  public AttachmentWithId setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Attachment getAttachment() {
    return this.attachment;
  }

  public AttachmentWithId setAttachment(@org.apache.thrift.annotation.Nullable Attachment attachment) {
    this.attachment = attachment;
    return this;
  }

  public void unsetAttachment() {
    this.attachment = null;
  }

  /** Returns true if field attachment is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachment() {
    return this.attachment != null;
  }

  public void setAttachmentIsSet(boolean value) {
    if (!value) {
      this.attachment = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case ATTACHMENT:
      if (value == null) {
        unsetAttachment();
      } else {
        setAttachment((Attachment)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case ATTACHMENT:
      return getAttachment();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case ATTACHMENT:
      return isSetAttachment();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AttachmentWithId)
      return this.equals((AttachmentWithId)that);
    return false;
  }

  public boolean equals(AttachmentWithId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_attachment = true && this.isSetAttachment();
    boolean that_present_attachment = true && that.isSetAttachment();
    if (this_present_attachment || that_present_attachment) {
      if (!(this_present_attachment && that_present_attachment))
        return false;
      if (!this.attachment.equals(that.attachment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttachment()) ? 131071 : 524287);
    if (isSetAttachment())
      hashCode = hashCode * 8191 + attachment.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AttachmentWithId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAttachment(), other.isSetAttachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachment, other.attachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AttachmentWithId(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachment:");
    if (this.attachment == null) {
      sb.append("null");
    } else {
      sb.append(this.attachment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (attachment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'attachment' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (attachment != null) {
      attachment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttachmentWithIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AttachmentWithIdStandardScheme getScheme() {
      return new AttachmentWithIdStandardScheme();
    }
  }

  private static class AttachmentWithIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<AttachmentWithId> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AttachmentWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTACHMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attachment = new Attachment();
              struct.attachment.read(iprot);
              struct.setAttachmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AttachmentWithId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.attachment != null) {
        oprot.writeFieldBegin(ATTACHMENT_FIELD_DESC);
        struct.attachment.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttachmentWithIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AttachmentWithIdTupleScheme getScheme() {
      return new AttachmentWithIdTupleScheme();
    }
  }

  private static class AttachmentWithIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<AttachmentWithId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AttachmentWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.uuid);
      struct.attachment.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AttachmentWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid = iprot.readString();
      struct.setUuidIsSet(true);
      struct.attachment = new Attachment();
      struct.attachment.read(iprot);
      struct.setAttachmentIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

