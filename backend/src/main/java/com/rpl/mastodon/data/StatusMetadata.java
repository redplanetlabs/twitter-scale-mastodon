/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StatusMetadata implements org.apache.thrift.TBase<StatusMetadata, StatusMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<StatusMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusMetadata");

  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FAVORITED_FIELD_DESC = new org.apache.thrift.protocol.TField("favorited", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BOOSTED_FIELD_DESC = new org.apache.thrift.protocol.TField("boosted", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MUTED_FIELD_DESC = new org.apache.thrift.protocol.TField("muted", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField BOOKMARKED_FIELD_DESC = new org.apache.thrift.protocol.TField("bookmarked", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("pinned", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField FAVORITE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("favoriteCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BOOST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("boostCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REPLY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("replyCount", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatusMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatusMetadataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<MatchingFilter> filters; // required
  public boolean favorited; // required
  public boolean boosted; // required
  public boolean muted; // required
  public boolean bookmarked; // required
  public boolean pinned; // required
  public int favoriteCount; // required
  public int boostCount; // required
  public int replyCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTERS((short)1, "filters"),
    FAVORITED((short)2, "favorited"),
    BOOSTED((short)3, "boosted"),
    MUTED((short)4, "muted"),
    BOOKMARKED((short)5, "bookmarked"),
    PINNED((short)6, "pinned"),
    FAVORITE_COUNT((short)7, "favoriteCount"),
    BOOST_COUNT((short)8, "boostCount"),
    REPLY_COUNT((short)9, "replyCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTERS
          return FILTERS;
        case 2: // FAVORITED
          return FAVORITED;
        case 3: // BOOSTED
          return BOOSTED;
        case 4: // MUTED
          return MUTED;
        case 5: // BOOKMARKED
          return BOOKMARKED;
        case 6: // PINNED
          return PINNED;
        case 7: // FAVORITE_COUNT
          return FAVORITE_COUNT;
        case 8: // BOOST_COUNT
          return BOOST_COUNT;
        case 9: // REPLY_COUNT
          return REPLY_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FAVORITED_ISSET_ID = 0;
  private static final int __BOOSTED_ISSET_ID = 1;
  private static final int __MUTED_ISSET_ID = 2;
  private static final int __BOOKMARKED_ISSET_ID = 3;
  private static final int __PINNED_ISSET_ID = 4;
  private static final int __FAVORITECOUNT_ISSET_ID = 5;
  private static final int __BOOSTCOUNT_ISSET_ID = 6;
  private static final int __REPLYCOUNT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchingFilter.class))));
    tmpMap.put(_Fields.FAVORITED, new org.apache.thrift.meta_data.FieldMetaData("favorited", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOOSTED, new org.apache.thrift.meta_data.FieldMetaData("boosted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MUTED, new org.apache.thrift.meta_data.FieldMetaData("muted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOOKMARKED, new org.apache.thrift.meta_data.FieldMetaData("bookmarked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PINNED, new org.apache.thrift.meta_data.FieldMetaData("pinned", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FAVORITE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("favoriteCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("boostCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("replyCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusMetadata.class, metaDataMap);
  }

  public StatusMetadata() {
  }

  public StatusMetadata(
    java.util.List<MatchingFilter> filters,
    boolean favorited,
    boolean boosted,
    boolean muted,
    boolean bookmarked,
    boolean pinned,
    int favoriteCount,
    int boostCount,
    int replyCount)
  {
    this();
    this.filters = filters;
    this.favorited = favorited;
    setFavoritedIsSet(true);
    this.boosted = boosted;
    setBoostedIsSet(true);
    this.muted = muted;
    setMutedIsSet(true);
    this.bookmarked = bookmarked;
    setBookmarkedIsSet(true);
    this.pinned = pinned;
    setPinnedIsSet(true);
    this.favoriteCount = favoriteCount;
    setFavoriteCountIsSet(true);
    this.boostCount = boostCount;
    setBoostCountIsSet(true);
    this.replyCount = replyCount;
    setReplyCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusMetadata(StatusMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFilters()) {
      java.util.List<MatchingFilter> __this__filters = new java.util.ArrayList<MatchingFilter>(other.filters.size());
      for (MatchingFilter other_element : other.filters) {
        __this__filters.add(new MatchingFilter(other_element));
      }
      this.filters = __this__filters;
    }
    this.favorited = other.favorited;
    this.boosted = other.boosted;
    this.muted = other.muted;
    this.bookmarked = other.bookmarked;
    this.pinned = other.pinned;
    this.favoriteCount = other.favoriteCount;
    this.boostCount = other.boostCount;
    this.replyCount = other.replyCount;
  }

  @Override
  public StatusMetadata deepCopy() {
    return new StatusMetadata(this);
  }

  @Override
  public void clear() {
    this.filters = null;
    setFavoritedIsSet(false);
    this.favorited = false;
    setBoostedIsSet(false);
    this.boosted = false;
    setMutedIsSet(false);
    this.muted = false;
    setBookmarkedIsSet(false);
    this.bookmarked = false;
    setPinnedIsSet(false);
    this.pinned = false;
    setFavoriteCountIsSet(false);
    this.favoriteCount = 0;
    setBoostCountIsSet(false);
    this.boostCount = 0;
    setReplyCountIsSet(false);
    this.replyCount = 0;
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<MatchingFilter> getFiltersIterator() {
    return (this.filters == null) ? null : this.filters.iterator();
  }

  public void addToFilters(MatchingFilter elem) {
    if (this.filters == null) {
      this.filters = new java.util.ArrayList<MatchingFilter>();
    }
    this.filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<MatchingFilter> getFilters() {
    return this.filters;
  }

  public StatusMetadata setFilters(@org.apache.thrift.annotation.Nullable java.util.List<MatchingFilter> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public boolean isFavorited() {
    return this.favorited;
  }

  public StatusMetadata setFavorited(boolean favorited) {
    this.favorited = favorited;
    setFavoritedIsSet(true);
    return this;
  }

  public void unsetFavorited() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  /** Returns true if field favorited is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorited() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  public void setFavoritedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAVORITED_ISSET_ID, value);
  }

  public boolean isBoosted() {
    return this.boosted;
  }

  public StatusMetadata setBoosted(boolean boosted) {
    this.boosted = boosted;
    setBoostedIsSet(true);
    return this;
  }

  public void unsetBoosted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOSTED_ISSET_ID);
  }

  /** Returns true if field boosted is set (has been assigned a value) and false otherwise */
  public boolean isSetBoosted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOSTED_ISSET_ID);
  }

  public void setBoostedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOSTED_ISSET_ID, value);
  }

  public boolean isMuted() {
    return this.muted;
  }

  public StatusMetadata setMuted(boolean muted) {
    this.muted = muted;
    setMutedIsSet(true);
    return this;
  }

  public void unsetMuted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MUTED_ISSET_ID);
  }

  /** Returns true if field muted is set (has been assigned a value) and false otherwise */
  public boolean isSetMuted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MUTED_ISSET_ID);
  }

  public void setMutedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MUTED_ISSET_ID, value);
  }

  public boolean isBookmarked() {
    return this.bookmarked;
  }

  public StatusMetadata setBookmarked(boolean bookmarked) {
    this.bookmarked = bookmarked;
    setBookmarkedIsSet(true);
    return this;
  }

  public void unsetBookmarked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOKMARKED_ISSET_ID);
  }

  /** Returns true if field bookmarked is set (has been assigned a value) and false otherwise */
  public boolean isSetBookmarked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOKMARKED_ISSET_ID);
  }

  public void setBookmarkedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOKMARKED_ISSET_ID, value);
  }

  public boolean isPinned() {
    return this.pinned;
  }

  public StatusMetadata setPinned(boolean pinned) {
    this.pinned = pinned;
    setPinnedIsSet(true);
    return this;
  }

  public void unsetPinned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  /** Returns true if field pinned is set (has been assigned a value) and false otherwise */
  public boolean isSetPinned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PINNED_ISSET_ID);
  }

  public void setPinnedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PINNED_ISSET_ID, value);
  }

  public int getFavoriteCount() {
    return this.favoriteCount;
  }

  public StatusMetadata setFavoriteCount(int favoriteCount) {
    this.favoriteCount = favoriteCount;
    setFavoriteCountIsSet(true);
    return this;
  }

  public void unsetFavoriteCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAVORITECOUNT_ISSET_ID);
  }

  /** Returns true if field favoriteCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFavoriteCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAVORITECOUNT_ISSET_ID);
  }

  public void setFavoriteCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAVORITECOUNT_ISSET_ID, value);
  }

  public int getBoostCount() {
    return this.boostCount;
  }

  public StatusMetadata setBoostCount(int boostCount) {
    this.boostCount = boostCount;
    setBoostCountIsSet(true);
    return this;
  }

  public void unsetBoostCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOSTCOUNT_ISSET_ID);
  }

  /** Returns true if field boostCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBoostCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOSTCOUNT_ISSET_ID);
  }

  public void setBoostCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOSTCOUNT_ISSET_ID, value);
  }

  public int getReplyCount() {
    return this.replyCount;
  }

  public StatusMetadata setReplyCount(int replyCount) {
    this.replyCount = replyCount;
    setReplyCountIsSet(true);
    return this;
  }

  public void unsetReplyCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID);
  }

  /** Returns true if field replyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID);
  }

  public void setReplyCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((java.util.List<MatchingFilter>)value);
      }
      break;

    case FAVORITED:
      if (value == null) {
        unsetFavorited();
      } else {
        setFavorited((java.lang.Boolean)value);
      }
      break;

    case BOOSTED:
      if (value == null) {
        unsetBoosted();
      } else {
        setBoosted((java.lang.Boolean)value);
      }
      break;

    case MUTED:
      if (value == null) {
        unsetMuted();
      } else {
        setMuted((java.lang.Boolean)value);
      }
      break;

    case BOOKMARKED:
      if (value == null) {
        unsetBookmarked();
      } else {
        setBookmarked((java.lang.Boolean)value);
      }
      break;

    case PINNED:
      if (value == null) {
        unsetPinned();
      } else {
        setPinned((java.lang.Boolean)value);
      }
      break;

    case FAVORITE_COUNT:
      if (value == null) {
        unsetFavoriteCount();
      } else {
        setFavoriteCount((java.lang.Integer)value);
      }
      break;

    case BOOST_COUNT:
      if (value == null) {
        unsetBoostCount();
      } else {
        setBoostCount((java.lang.Integer)value);
      }
      break;

    case REPLY_COUNT:
      if (value == null) {
        unsetReplyCount();
      } else {
        setReplyCount((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTERS:
      return getFilters();

    case FAVORITED:
      return isFavorited();

    case BOOSTED:
      return isBoosted();

    case MUTED:
      return isMuted();

    case BOOKMARKED:
      return isBookmarked();

    case PINNED:
      return isPinned();

    case FAVORITE_COUNT:
      return getFavoriteCount();

    case BOOST_COUNT:
      return getBoostCount();

    case REPLY_COUNT:
      return getReplyCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILTERS:
      return isSetFilters();
    case FAVORITED:
      return isSetFavorited();
    case BOOSTED:
      return isSetBoosted();
    case MUTED:
      return isSetMuted();
    case BOOKMARKED:
      return isSetBookmarked();
    case PINNED:
      return isSetPinned();
    case FAVORITE_COUNT:
      return isSetFavoriteCount();
    case BOOST_COUNT:
      return isSetBoostCount();
    case REPLY_COUNT:
      return isSetReplyCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StatusMetadata)
      return this.equals((StatusMetadata)that);
    return false;
  }

  public boolean equals(StatusMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    boolean this_present_favorited = true;
    boolean that_present_favorited = true;
    if (this_present_favorited || that_present_favorited) {
      if (!(this_present_favorited && that_present_favorited))
        return false;
      if (this.favorited != that.favorited)
        return false;
    }

    boolean this_present_boosted = true;
    boolean that_present_boosted = true;
    if (this_present_boosted || that_present_boosted) {
      if (!(this_present_boosted && that_present_boosted))
        return false;
      if (this.boosted != that.boosted)
        return false;
    }

    boolean this_present_muted = true;
    boolean that_present_muted = true;
    if (this_present_muted || that_present_muted) {
      if (!(this_present_muted && that_present_muted))
        return false;
      if (this.muted != that.muted)
        return false;
    }

    boolean this_present_bookmarked = true;
    boolean that_present_bookmarked = true;
    if (this_present_bookmarked || that_present_bookmarked) {
      if (!(this_present_bookmarked && that_present_bookmarked))
        return false;
      if (this.bookmarked != that.bookmarked)
        return false;
    }

    boolean this_present_pinned = true;
    boolean that_present_pinned = true;
    if (this_present_pinned || that_present_pinned) {
      if (!(this_present_pinned && that_present_pinned))
        return false;
      if (this.pinned != that.pinned)
        return false;
    }

    boolean this_present_favoriteCount = true;
    boolean that_present_favoriteCount = true;
    if (this_present_favoriteCount || that_present_favoriteCount) {
      if (!(this_present_favoriteCount && that_present_favoriteCount))
        return false;
      if (this.favoriteCount != that.favoriteCount)
        return false;
    }

    boolean this_present_boostCount = true;
    boolean that_present_boostCount = true;
    if (this_present_boostCount || that_present_boostCount) {
      if (!(this_present_boostCount && that_present_boostCount))
        return false;
      if (this.boostCount != that.boostCount)
        return false;
    }

    boolean this_present_replyCount = true;
    boolean that_present_replyCount = true;
    if (this_present_replyCount || that_present_replyCount) {
      if (!(this_present_replyCount && that_present_replyCount))
        return false;
      if (this.replyCount != that.replyCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilters()) ? 131071 : 524287);
    if (isSetFilters())
      hashCode = hashCode * 8191 + filters.hashCode();

    hashCode = hashCode * 8191 + ((favorited) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((boosted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((muted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((bookmarked) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((pinned) ? 131071 : 524287);

    hashCode = hashCode * 8191 + favoriteCount;

    hashCode = hashCode * 8191 + boostCount;

    hashCode = hashCode * 8191 + replyCount;

    return hashCode;
  }

  @Override
  public int compareTo(StatusMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilters(), other.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, other.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFavorited(), other.isSetFavorited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorited, other.favorited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBoosted(), other.isSetBoosted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoosted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boosted, other.boosted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMuted(), other.isSetMuted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMuted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.muted, other.muted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBookmarked(), other.isSetBookmarked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookmarked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookmarked, other.bookmarked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPinned(), other.isSetPinned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinned, other.pinned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFavoriteCount(), other.isSetFavoriteCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavoriteCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoriteCount, other.favoriteCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBoostCount(), other.isSetBoostCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoostCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boostCount, other.boostCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplyCount(), other.isSetReplyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyCount, other.replyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StatusMetadata(");
    boolean first = true;

    sb.append("filters:");
    if (this.filters == null) {
      sb.append("null");
    } else {
      sb.append(this.filters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorited:");
    sb.append(this.favorited);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boosted:");
    sb.append(this.boosted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("muted:");
    sb.append(this.muted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookmarked:");
    sb.append(this.bookmarked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pinned:");
    sb.append(this.pinned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("favoriteCount:");
    sb.append(this.favoriteCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boostCount:");
    sb.append(this.boostCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyCount:");
    sb.append(this.replyCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (filters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filters' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'favorited' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'boosted' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'muted' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bookmarked' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pinned' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'favoriteCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'boostCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'replyCount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusMetadataStandardScheme getScheme() {
      return new StatusMetadataStandardScheme();
    }
  }

  private static class StatusMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatusMetadata> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                struct.filters = new java.util.ArrayList<MatchingFilter>(_list138.size);
                @org.apache.thrift.annotation.Nullable MatchingFilter _elem139;
                for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                {
                  _elem139 = new MatchingFilter();
                  _elem139.read(iprot);
                  struct.filters.add(_elem139);
                }
                iprot.readListEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAVORITED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.favorited = iprot.readBool();
              struct.setFavoritedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOOSTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boosted = iprot.readBool();
              struct.setBoostedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MUTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.muted = iprot.readBool();
              struct.setMutedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOOKMARKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bookmarked = iprot.readBool();
              struct.setBookmarkedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PINNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pinned = iprot.readBool();
              struct.setPinnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAVORITE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.favoriteCount = iprot.readI32();
              struct.setFavoriteCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BOOST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.boostCount = iprot.readI32();
              struct.setBoostCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPLY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replyCount = iprot.readI32();
              struct.setReplyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFavorited()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'favorited' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBoosted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'boosted' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMuted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'muted' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBookmarked()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bookmarked' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPinned()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pinned' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFavoriteCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'favoriteCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBoostCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'boostCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReplyCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'replyCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filters != null) {
        oprot.writeFieldBegin(FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
          for (MatchingFilter _iter141 : struct.filters)
          {
            _iter141.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAVORITED_FIELD_DESC);
      oprot.writeBool(struct.favorited);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOSTED_FIELD_DESC);
      oprot.writeBool(struct.boosted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUTED_FIELD_DESC);
      oprot.writeBool(struct.muted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOKMARKED_FIELD_DESC);
      oprot.writeBool(struct.bookmarked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PINNED_FIELD_DESC);
      oprot.writeBool(struct.pinned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAVORITE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.favoriteCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOST_COUNT_FIELD_DESC);
      oprot.writeI32(struct.boostCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.replyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusMetadataTupleScheme getScheme() {
      return new StatusMetadataTupleScheme();
    }
  }

  private static class StatusMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatusMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.filters.size());
        for (MatchingFilter _iter142 : struct.filters)
        {
          _iter142.write(oprot);
        }
      }
      oprot.writeBool(struct.favorited);
      oprot.writeBool(struct.boosted);
      oprot.writeBool(struct.muted);
      oprot.writeBool(struct.bookmarked);
      oprot.writeBool(struct.pinned);
      oprot.writeI32(struct.favoriteCount);
      oprot.writeI32(struct.boostCount);
      oprot.writeI32(struct.replyCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list143 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.filters = new java.util.ArrayList<MatchingFilter>(_list143.size);
        @org.apache.thrift.annotation.Nullable MatchingFilter _elem144;
        for (int _i145 = 0; _i145 < _list143.size; ++_i145)
        {
          _elem144 = new MatchingFilter();
          _elem144.read(iprot);
          struct.filters.add(_elem144);
        }
      }
      struct.setFiltersIsSet(true);
      struct.favorited = iprot.readBool();
      struct.setFavoritedIsSet(true);
      struct.boosted = iprot.readBool();
      struct.setBoostedIsSet(true);
      struct.muted = iprot.readBool();
      struct.setMutedIsSet(true);
      struct.bookmarked = iprot.readBool();
      struct.setBookmarkedIsSet(true);
      struct.pinned = iprot.readBool();
      struct.setPinnedIsSet(true);
      struct.favoriteCount = iprot.readI32();
      struct.setFavoriteCountIsSet(true);
      struct.boostCount = iprot.readI32();
      struct.setBoostCountIsSet(true);
      struct.replyCount = iprot.readI32();
      struct.setReplyCountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

