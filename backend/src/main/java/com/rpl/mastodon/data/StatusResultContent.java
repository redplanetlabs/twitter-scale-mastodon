/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StatusResultContent extends org.apache.thrift.TUnion<StatusResultContent, StatusResultContent._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusResultContent");
  private static final org.apache.thrift.protocol.TField NORMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("normal", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BOOST_FIELD_DESC = new org.apache.thrift.protocol.TField("boost", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NORMAL((short)1, "normal"),
    REPLY((short)2, "reply"),
    BOOST((short)3, "boost");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NORMAL
          return NORMAL;
        case 2: // REPLY
          return REPLY;
        case 3: // BOOST
          return BOOST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NORMAL, new org.apache.thrift.meta_data.FieldMetaData("normal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NormalStatusContent.class)));
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReplyStatusContent.class)));
    tmpMap.put(_Fields.BOOST, new org.apache.thrift.meta_data.FieldMetaData("boost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BoostStatusResultContent.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusResultContent.class, metaDataMap);
  }

  public StatusResultContent() {
    super();
  }

  public StatusResultContent(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public StatusResultContent(StatusResultContent other) {
    super(other);
  }
  @Override
  public StatusResultContent deepCopy() {
    return new StatusResultContent(this);
  }

  public static StatusResultContent normal(NormalStatusContent value) {
    StatusResultContent x = new StatusResultContent();
    x.setNormal(value);
    return x;
  }

  public static StatusResultContent reply(ReplyStatusContent value) {
    StatusResultContent x = new StatusResultContent();
    x.setReply(value);
    return x;
  }

  public static StatusResultContent boost(BoostStatusResultContent value) {
    StatusResultContent x = new StatusResultContent();
    x.setBoost(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case NORMAL:
        if (value instanceof NormalStatusContent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type NormalStatusContent for field 'normal', but got " + value.getClass().getSimpleName());
      case REPLY:
        if (value instanceof ReplyStatusContent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type ReplyStatusContent for field 'reply', but got " + value.getClass().getSimpleName());
      case BOOST:
        if (value instanceof BoostStatusResultContent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type BoostStatusResultContent for field 'boost', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case NORMAL:
          if (field.type == NORMAL_FIELD_DESC.type) {
            NormalStatusContent normal;
            normal = new NormalStatusContent();
            normal.read(iprot);
            return normal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REPLY:
          if (field.type == REPLY_FIELD_DESC.type) {
            ReplyStatusContent reply;
            reply = new ReplyStatusContent();
            reply.read(iprot);
            return reply;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOST:
          if (field.type == BOOST_FIELD_DESC.type) {
            BoostStatusResultContent boost;
            boost = new BoostStatusResultContent();
            boost.read(iprot);
            return boost;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case NORMAL:
        NormalStatusContent normal = (NormalStatusContent)value_;
        normal.write(oprot);
        return;
      case REPLY:
        ReplyStatusContent reply = (ReplyStatusContent)value_;
        reply.write(oprot);
        return;
      case BOOST:
        BoostStatusResultContent boost = (BoostStatusResultContent)value_;
        boost.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case NORMAL:
          NormalStatusContent normal;
          normal = new NormalStatusContent();
          normal.read(iprot);
          return normal;
        case REPLY:
          ReplyStatusContent reply;
          reply = new ReplyStatusContent();
          reply.read(iprot);
          return reply;
        case BOOST:
          BoostStatusResultContent boost;
          boost = new BoostStatusResultContent();
          boost.read(iprot);
          return boost;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case NORMAL:
        NormalStatusContent normal = (NormalStatusContent)value_;
        normal.write(oprot);
        return;
      case REPLY:
        ReplyStatusContent reply = (ReplyStatusContent)value_;
        reply.write(oprot);
        return;
      case BOOST:
        BoostStatusResultContent boost = (BoostStatusResultContent)value_;
        boost.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case NORMAL:
        return NORMAL_FIELD_DESC;
      case REPLY:
        return REPLY_FIELD_DESC;
      case BOOST:
        return BOOST_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public NormalStatusContent getNormal() {
    if (getSetField() == _Fields.NORMAL) {
      return (NormalStatusContent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'normal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNormal(NormalStatusContent value) {
    setField_ = _Fields.NORMAL;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.NORMAL");
  }

  public ReplyStatusContent getReply() {
    if (getSetField() == _Fields.REPLY) {
      return (ReplyStatusContent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'reply' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setReply(ReplyStatusContent value) {
    setField_ = _Fields.REPLY;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.REPLY");
  }

  public BoostStatusResultContent getBoost() {
    if (getSetField() == _Fields.BOOST) {
      return (BoostStatusResultContent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'boost' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoost(BoostStatusResultContent value) {
    setField_ = _Fields.BOOST;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.BOOST");
  }

  public boolean isSetNormal() {
    return setField_ == _Fields.NORMAL;
  }


  public boolean isSetReply() {
    return setField_ == _Fields.REPLY;
  }


  public boolean isSetBoost() {
    return setField_ == _Fields.BOOST;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof StatusResultContent) {
      return equals((StatusResultContent)other);
    } else {
      return false;
    }
  }

  public boolean equals(StatusResultContent other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(StatusResultContent other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
