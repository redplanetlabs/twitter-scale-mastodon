/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StatusSearchRecord implements org.apache.thrift.TBase<StatusSearchRecord, StatusSearchRecord._Fields>, java.io.Serializable, Cloneable, Comparable<StatusSearchRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusSearchRecord");

  private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statusId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatusSearchRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatusSearchRecordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> terms; // required
  public long accountId; // required
  public long statusId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERMS((short)1, "terms"),
    ACCOUNT_ID((short)2, "accountId"),
    STATUS_ID((short)3, "statusId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERMS
          return TERMS;
        case 2: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 3: // STATUS_ID
          return STATUS_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTID_ISSET_ID = 0;
  private static final int __STATUSID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "AccountId")));
    tmpMap.put(_Fields.STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("statusId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "StatusId")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusSearchRecord.class, metaDataMap);
  }

  public StatusSearchRecord() {
  }

  public StatusSearchRecord(
    java.util.Set<java.lang.String> terms,
    long accountId,
    long statusId)
  {
    this();
    this.terms = terms;
    this.accountId = accountId;
    setAccountIdIsSet(true);
    this.statusId = statusId;
    setStatusIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusSearchRecord(StatusSearchRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTerms()) {
      java.util.Set<java.lang.String> __this__terms = new java.util.HashSet<java.lang.String>(other.terms);
      this.terms = __this__terms;
    }
    this.accountId = other.accountId;
    this.statusId = other.statusId;
  }

  @Override
  public StatusSearchRecord deepCopy() {
    return new StatusSearchRecord(this);
  }

  @Override
  public void clear() {
    this.terms = null;
    setAccountIdIsSet(false);
    this.accountId = 0;
    setStatusIdIsSet(false);
    this.statusId = 0;
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(java.lang.String elem) {
    if (this.terms == null) {
      this.terms = new java.util.HashSet<java.lang.String>();
    }
    this.terms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getTerms() {
    return this.terms;
  }

  public StatusSearchRecord setTerms(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been assigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public long getAccountId() {
    return this.accountId;
  }

  public StatusSearchRecord setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public long getStatusId() {
    return this.statusId;
  }

  public StatusSearchRecord setStatusId(long statusId) {
    this.statusId = statusId;
    setStatusIdIsSet(true);
    return this;
  }

  public void unsetStatusId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSID_ISSET_ID);
  }

  /** Returns true if field statusId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSID_ISSET_ID);
  }

  public void setStatusIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((java.util.Set<java.lang.String>)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((java.lang.Long)value);
      }
      break;

    case STATUS_ID:
      if (value == null) {
        unsetStatusId();
      } else {
        setStatusId((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TERMS:
      return getTerms();

    case ACCOUNT_ID:
      return getAccountId();

    case STATUS_ID:
      return getStatusId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TERMS:
      return isSetTerms();
    case ACCOUNT_ID:
      return isSetAccountId();
    case STATUS_ID:
      return isSetStatusId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StatusSearchRecord)
      return this.equals((StatusSearchRecord)that);
    return false;
  }

  public boolean equals(StatusSearchRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    boolean this_present_accountId = true;
    boolean that_present_accountId = true;
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_statusId = true;
    boolean that_present_statusId = true;
    if (this_present_statusId || that_present_statusId) {
      if (!(this_present_statusId && that_present_statusId))
        return false;
      if (this.statusId != that.statusId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTerms()) ? 131071 : 524287);
    if (isSetTerms())
      hashCode = hashCode * 8191 + terms.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accountId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(statusId);

    return hashCode;
  }

  @Override
  public int compareTo(StatusSearchRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTerms(), other.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAccountId(), other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatusId(), other.isSetStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusId, other.statusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StatusSearchRecord(");
    boolean first = true;

    sb.append("terms:");
    if (this.terms == null) {
      sb.append("null");
    } else {
      sb.append(this.terms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    sb.append(this.accountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusId:");
    sb.append(this.statusId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusSearchRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusSearchRecordStandardScheme getScheme() {
      return new StatusSearchRecordStandardScheme();
    }
  }

  private static class StatusSearchRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatusSearchRecord> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set238 = iprot.readSetBegin();
                struct.terms = new java.util.HashSet<java.lang.String>(2*_set238.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem239;
                for (int _i240 = 0; _i240 < _set238.size; ++_i240)
                {
                  _elem239 = iprot.readString();
                  struct.terms.add(_elem239);
                }
                iprot.readSetEnd();
              }
              struct.setTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statusId = iprot.readI64();
              struct.setStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusSearchRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.terms != null) {
        oprot.writeFieldBegin(TERMS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.terms.size()));
          for (java.lang.String _iter241 : struct.terms)
          {
            oprot.writeString(_iter241);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.accountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_ID_FIELD_DESC);
      oprot.writeI64(struct.statusId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusSearchRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusSearchRecordTupleScheme getScheme() {
      return new StatusSearchRecordTupleScheme();
    }
  }

  private static class StatusSearchRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatusSearchRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTerms()) {
        optionals.set(0);
      }
      if (struct.isSetAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetStatusId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTerms()) {
        {
          oprot.writeI32(struct.terms.size());
          for (java.lang.String _iter242 : struct.terms)
          {
            oprot.writeString(_iter242);
          }
        }
      }
      if (struct.isSetAccountId()) {
        oprot.writeI64(struct.accountId);
      }
      if (struct.isSetStatusId()) {
        oprot.writeI64(struct.statusId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set243 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.terms = new java.util.HashSet<java.lang.String>(2*_set243.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem244;
          for (int _i245 = 0; _i245 < _set243.size; ++_i245)
          {
            _elem244 = iprot.readString();
            struct.terms.add(_elem244);
          }
        }
        struct.setTermsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accountId = iprot.readI64();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.statusId = iprot.readI64();
        struct.setStatusIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

