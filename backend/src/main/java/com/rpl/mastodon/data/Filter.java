/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Filter implements org.apache.thrift.TBase<Filter, Filter._Fields>, java.io.Serializable, Cloneable, Comparable<Filter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Filter");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contexts", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRATION_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("expirationMillis", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FilterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FilterTupleSchemeFactory();

  public long accountId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<FilterContext> contexts; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<KeywordFilter> keywords; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<StatusPointer> statuses; // required
  /**
   * 
   * @see FilterAction
   */
  public @org.apache.thrift.annotation.Nullable FilterAction action; // required
  public long timestamp; // required
  public long expirationMillis; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    TITLE((short)2, "title"),
    CONTEXTS((short)3, "contexts"),
    KEYWORDS((short)4, "keywords"),
    STATUSES((short)5, "statuses"),
    /**
     * 
     * @see FilterAction
     */
    ACTION((short)6, "action"),
    TIMESTAMP((short)7, "timestamp"),
    EXPIRATION_MILLIS((short)8, "expirationMillis");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CONTEXTS
          return CONTEXTS;
        case 4: // KEYWORDS
          return KEYWORDS;
        case 5: // STATUSES
          return STATUSES;
        case 6: // ACTION
          return ACTION;
        case 7: // TIMESTAMP
          return TIMESTAMP;
        case 8: // EXPIRATION_MILLIS
          return EXPIRATION_MILLIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTID_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __EXPIRATIONMILLIS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXPIRATION_MILLIS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "AccountId")));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTEXTS, new org.apache.thrift.meta_data.FieldMetaData("contexts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FilterContext.class))));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeywordFilter.class))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusPointer.class))));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FilterAction.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.EXPIRATION_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("expirationMillis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Filter.class, metaDataMap);
  }

  public Filter() {
  }

  public Filter(
    long accountId,
    java.lang.String title,
    java.util.Set<FilterContext> contexts,
    java.util.List<KeywordFilter> keywords,
    java.util.Set<StatusPointer> statuses,
    FilterAction action,
    long timestamp)
  {
    this();
    this.accountId = accountId;
    setAccountIdIsSet(true);
    this.title = title;
    this.contexts = contexts;
    this.keywords = keywords;
    this.statuses = statuses;
    this.action = action;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Filter(Filter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accountId = other.accountId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContexts()) {
      java.util.Set<FilterContext> __this__contexts = java.util.EnumSet.noneOf(FilterContext.class);
      for (FilterContext other_element : other.contexts) {
        __this__contexts.add(other_element);
      }
      this.contexts = __this__contexts;
    }
    if (other.isSetKeywords()) {
      java.util.List<KeywordFilter> __this__keywords = new java.util.ArrayList<KeywordFilter>(other.keywords.size());
      for (KeywordFilter other_element : other.keywords) {
        __this__keywords.add(new KeywordFilter(other_element));
      }
      this.keywords = __this__keywords;
    }
    if (other.isSetStatuses()) {
      java.util.Set<StatusPointer> __this__statuses = new java.util.HashSet<StatusPointer>(other.statuses.size());
      for (StatusPointer other_element : other.statuses) {
        __this__statuses.add(new StatusPointer(other_element));
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    this.timestamp = other.timestamp;
    this.expirationMillis = other.expirationMillis;
  }

  @Override
  public Filter deepCopy() {
    return new Filter(this);
  }

  @Override
  public void clear() {
    setAccountIdIsSet(false);
    this.accountId = 0;
    this.title = null;
    this.contexts = null;
    this.keywords = null;
    this.statuses = null;
    this.action = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setExpirationMillisIsSet(false);
    this.expirationMillis = 0;
  }

  public long getAccountId() {
    return this.accountId;
  }

  public Filter setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public Filter setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getContextsSize() {
    return (this.contexts == null) ? 0 : this.contexts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<FilterContext> getContextsIterator() {
    return (this.contexts == null) ? null : this.contexts.iterator();
  }

  public void addToContexts(FilterContext elem) {
    if (this.contexts == null) {
      this.contexts = java.util.EnumSet.noneOf(FilterContext.class);
    }
    this.contexts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<FilterContext> getContexts() {
    return this.contexts;
  }

  public Filter setContexts(@org.apache.thrift.annotation.Nullable java.util.Set<FilterContext> contexts) {
    this.contexts = contexts;
    return this;
  }

  public void unsetContexts() {
    this.contexts = null;
  }

  /** Returns true if field contexts is set (has been assigned a value) and false otherwise */
  public boolean isSetContexts() {
    return this.contexts != null;
  }

  public void setContextsIsSet(boolean value) {
    if (!value) {
      this.contexts = null;
    }
  }

  public int getKeywordsSize() {
    return (this.keywords == null) ? 0 : this.keywords.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<KeywordFilter> getKeywordsIterator() {
    return (this.keywords == null) ? null : this.keywords.iterator();
  }

  public void addToKeywords(KeywordFilter elem) {
    if (this.keywords == null) {
      this.keywords = new java.util.ArrayList<KeywordFilter>();
    }
    this.keywords.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<KeywordFilter> getKeywords() {
    return this.keywords;
  }

  public Filter setKeywords(@org.apache.thrift.annotation.Nullable java.util.List<KeywordFilter> keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<StatusPointer> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(StatusPointer elem) {
    if (this.statuses == null) {
      this.statuses = new java.util.HashSet<StatusPointer>();
    }
    this.statuses.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<StatusPointer> getStatuses() {
    return this.statuses;
  }

  public Filter setStatuses(@org.apache.thrift.annotation.Nullable java.util.Set<StatusPointer> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  /**
   * 
   * @see FilterAction
   */
  @org.apache.thrift.annotation.Nullable
  public FilterAction getAction() {
    return this.action;
  }

  /**
   * 
   * @see FilterAction
   */
  public Filter setAction(@org.apache.thrift.annotation.Nullable FilterAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Filter setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getExpirationMillis() {
    return this.expirationMillis;
  }

  public Filter setExpirationMillis(long expirationMillis) {
    this.expirationMillis = expirationMillis;
    setExpirationMillisIsSet(true);
    return this;
  }

  public void unsetExpirationMillis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRATIONMILLIS_ISSET_ID);
  }

  /** Returns true if field expirationMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirationMillis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRATIONMILLIS_ISSET_ID);
  }

  public void setExpirationMillisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRATIONMILLIS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((java.lang.Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case CONTEXTS:
      if (value == null) {
        unsetContexts();
      } else {
        setContexts((java.util.Set<FilterContext>)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((java.util.List<KeywordFilter>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((java.util.Set<StatusPointer>)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((FilterAction)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case EXPIRATION_MILLIS:
      if (value == null) {
        unsetExpirationMillis();
      } else {
        setExpirationMillis((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return getAccountId();

    case TITLE:
      return getTitle();

    case CONTEXTS:
      return getContexts();

    case KEYWORDS:
      return getKeywords();

    case STATUSES:
      return getStatuses();

    case ACTION:
      return getAction();

    case TIMESTAMP:
      return getTimestamp();

    case EXPIRATION_MILLIS:
      return getExpirationMillis();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case TITLE:
      return isSetTitle();
    case CONTEXTS:
      return isSetContexts();
    case KEYWORDS:
      return isSetKeywords();
    case STATUSES:
      return isSetStatuses();
    case ACTION:
      return isSetAction();
    case TIMESTAMP:
      return isSetTimestamp();
    case EXPIRATION_MILLIS:
      return isSetExpirationMillis();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Filter)
      return this.equals((Filter)that);
    return false;
  }

  public boolean equals(Filter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accountId = true;
    boolean that_present_accountId = true;
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_contexts = true && this.isSetContexts();
    boolean that_present_contexts = true && that.isSetContexts();
    if (this_present_contexts || that_present_contexts) {
      if (!(this_present_contexts && that_present_contexts))
        return false;
      if (!this.contexts.equals(that.contexts))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_expirationMillis = true && this.isSetExpirationMillis();
    boolean that_present_expirationMillis = true && that.isSetExpirationMillis();
    if (this_present_expirationMillis || that_present_expirationMillis) {
      if (!(this_present_expirationMillis && that_present_expirationMillis))
        return false;
      if (this.expirationMillis != that.expirationMillis)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accountId);

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetContexts()) ? 131071 : 524287);
    if (isSetContexts())
      hashCode = hashCode * 8191 + contexts.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeywords()) ? 131071 : 524287);
    if (isSetKeywords())
      hashCode = hashCode * 8191 + keywords.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatuses()) ? 131071 : 524287);
    if (isSetStatuses())
      hashCode = hashCode * 8191 + statuses.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetExpirationMillis()) ? 131071 : 524287);
    if (isSetExpirationMillis())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expirationMillis);

    return hashCode;
  }

  @Override
  public int compareTo(Filter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAccountId(), other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTitle(), other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContexts(), other.isSetContexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contexts, other.contexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeywords(), other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatuses(), other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAction(), other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpirationMillis(), other.isSetExpirationMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirationMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expirationMillis, other.expirationMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Filter(");
    boolean first = true;

    sb.append("accountId:");
    sb.append(this.accountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contexts:");
    if (this.contexts == null) {
      sb.append("null");
    } else {
      sb.append(this.contexts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statuses:");
    if (this.statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.statuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetExpirationMillis()) {
      if (!first) sb.append(", ");
      sb.append("expirationMillis:");
      sb.append(this.expirationMillis);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'accountId' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (contexts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contexts' was not present! Struct: " + toString());
    }
    if (keywords == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keywords' was not present! Struct: " + toString());
    }
    if (statuses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statuses' was not present! Struct: " + toString());
    }
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FilterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FilterStandardScheme getScheme() {
      return new FilterStandardScheme();
    }
  }

  private static class FilterStandardScheme extends org.apache.thrift.scheme.StandardScheme<Filter> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set182 = iprot.readSetBegin();
                struct.contexts = java.util.EnumSet.noneOf(FilterContext.class);
                @org.apache.thrift.annotation.Nullable FilterContext _elem183;
                for (int _i184 = 0; _i184 < _set182.size; ++_i184)
                {
                  _elem183 = com.rpl.mastodon.data.FilterContext.findByValue(iprot.readI32());
                  if (_elem183 != null)
                  {
                    struct.contexts.add(_elem183);
                  }
                }
                iprot.readSetEnd();
              }
              struct.setContextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
                struct.keywords = new java.util.ArrayList<KeywordFilter>(_list185.size);
                @org.apache.thrift.annotation.Nullable KeywordFilter _elem186;
                for (int _i187 = 0; _i187 < _list185.size; ++_i187)
                {
                  _elem186 = new KeywordFilter();
                  _elem186.read(iprot);
                  struct.keywords.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set188 = iprot.readSetBegin();
                struct.statuses = new java.util.HashSet<StatusPointer>(2*_set188.size);
                @org.apache.thrift.annotation.Nullable StatusPointer _elem189;
                for (int _i190 = 0; _i190 < _set188.size; ++_i190)
                {
                  _elem189 = new StatusPointer();
                  _elem189.read(iprot);
                  struct.statuses.add(_elem189);
                }
                iprot.readSetEnd();
              }
              struct.setStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = com.rpl.mastodon.data.FilterAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRATION_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expirationMillis = iprot.readI64();
              struct.setExpirationMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAccountId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Filter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.accountId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.contexts != null) {
        oprot.writeFieldBegin(CONTEXTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.contexts.size()));
          for (FilterContext _iter191 : struct.contexts)
          {
            oprot.writeI32(_iter191.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keywords.size()));
          for (KeywordFilter _iter192 : struct.keywords)
          {
            _iter192.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.statuses.size()));
          for (StatusPointer _iter193 : struct.statuses)
          {
            _iter193.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.isSetExpirationMillis()) {
        oprot.writeFieldBegin(EXPIRATION_MILLIS_FIELD_DESC);
        oprot.writeI64(struct.expirationMillis);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FilterTupleScheme getScheme() {
      return new FilterTupleScheme();
    }
  }

  private static class FilterTupleScheme extends org.apache.thrift.scheme.TupleScheme<Filter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.accountId);
      oprot.writeString(struct.title);
      {
        oprot.writeI32(struct.contexts.size());
        for (FilterContext _iter194 : struct.contexts)
        {
          oprot.writeI32(_iter194.getValue());
        }
      }
      {
        oprot.writeI32(struct.keywords.size());
        for (KeywordFilter _iter195 : struct.keywords)
        {
          _iter195.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.statuses.size());
        for (StatusPointer _iter196 : struct.statuses)
        {
          _iter196.write(oprot);
        }
      }
      oprot.writeI32(struct.action.getValue());
      oprot.writeI64(struct.timestamp);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExpirationMillis()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExpirationMillis()) {
        oprot.writeI64(struct.expirationMillis);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Filter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.accountId = iprot.readI64();
      struct.setAccountIdIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set197 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
        struct.contexts = java.util.EnumSet.noneOf(FilterContext.class);
        @org.apache.thrift.annotation.Nullable FilterContext _elem198;
        for (int _i199 = 0; _i199 < _set197.size; ++_i199)
        {
          _elem198 = com.rpl.mastodon.data.FilterContext.findByValue(iprot.readI32());
          if (_elem198 != null)
          {
            struct.contexts.add(_elem198);
          }
        }
      }
      struct.setContextsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list200 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.keywords = new java.util.ArrayList<KeywordFilter>(_list200.size);
        @org.apache.thrift.annotation.Nullable KeywordFilter _elem201;
        for (int _i202 = 0; _i202 < _list200.size; ++_i202)
        {
          _elem201 = new KeywordFilter();
          _elem201.read(iprot);
          struct.keywords.add(_elem201);
        }
      }
      struct.setKeywordsIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set203 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.statuses = new java.util.HashSet<StatusPointer>(2*_set203.size);
        @org.apache.thrift.annotation.Nullable StatusPointer _elem204;
        for (int _i205 = 0; _i205 < _set203.size; ++_i205)
        {
          _elem204 = new StatusPointer();
          _elem204.read(iprot);
          struct.statuses.add(_elem204);
        }
      }
      struct.setStatusesIsSet(true);
      struct.action = com.rpl.mastodon.data.FilterAction.findByValue(iprot.readI32());
      struct.setActionIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.expirationMillis = iprot.readI64();
        struct.setExpirationMillisIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

