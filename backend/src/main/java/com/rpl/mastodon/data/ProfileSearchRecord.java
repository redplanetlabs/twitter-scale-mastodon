/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ProfileSearchRecord implements org.apache.thrift.TBase<ProfileSearchRecord, ProfileSearchRecord._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileSearchRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileSearchRecord");

  private static final org.apache.thrift.protocol.TField OTHER_PROFILE_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("otherProfileTerms", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileSearchRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileSearchRecordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> otherProfileTerms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OTHER_PROFILE_TERMS((short)1, "otherProfileTerms"),
    USERNAME((short)2, "username");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OTHER_PROFILE_TERMS
          return OTHER_PROFILE_TERMS;
        case 2: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OTHER_PROFILE_TERMS, new org.apache.thrift.meta_data.FieldMetaData("otherProfileTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileSearchRecord.class, metaDataMap);
  }

  public ProfileSearchRecord() {
  }

  public ProfileSearchRecord(
    java.util.Set<java.lang.String> otherProfileTerms,
    java.lang.String username)
  {
    this();
    this.otherProfileTerms = otherProfileTerms;
    this.username = username;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileSearchRecord(ProfileSearchRecord other) {
    if (other.isSetOtherProfileTerms()) {
      java.util.Set<java.lang.String> __this__otherProfileTerms = new java.util.HashSet<java.lang.String>(other.otherProfileTerms);
      this.otherProfileTerms = __this__otherProfileTerms;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  @Override
  public ProfileSearchRecord deepCopy() {
    return new ProfileSearchRecord(this);
  }

  @Override
  public void clear() {
    this.otherProfileTerms = null;
    this.username = null;
  }

  public int getOtherProfileTermsSize() {
    return (this.otherProfileTerms == null) ? 0 : this.otherProfileTerms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getOtherProfileTermsIterator() {
    return (this.otherProfileTerms == null) ? null : this.otherProfileTerms.iterator();
  }

  public void addToOtherProfileTerms(java.lang.String elem) {
    if (this.otherProfileTerms == null) {
      this.otherProfileTerms = new java.util.HashSet<java.lang.String>();
    }
    this.otherProfileTerms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.String> getOtherProfileTerms() {
    return this.otherProfileTerms;
  }

  public ProfileSearchRecord setOtherProfileTerms(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> otherProfileTerms) {
    this.otherProfileTerms = otherProfileTerms;
    return this;
  }

  public void unsetOtherProfileTerms() {
    this.otherProfileTerms = null;
  }

  /** Returns true if field otherProfileTerms is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherProfileTerms() {
    return this.otherProfileTerms != null;
  }

  public void setOtherProfileTermsIsSet(boolean value) {
    if (!value) {
      this.otherProfileTerms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public ProfileSearchRecord setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OTHER_PROFILE_TERMS:
      if (value == null) {
        unsetOtherProfileTerms();
      } else {
        setOtherProfileTerms((java.util.Set<java.lang.String>)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OTHER_PROFILE_TERMS:
      return getOtherProfileTerms();

    case USERNAME:
      return getUsername();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OTHER_PROFILE_TERMS:
      return isSetOtherProfileTerms();
    case USERNAME:
      return isSetUsername();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ProfileSearchRecord)
      return this.equals((ProfileSearchRecord)that);
    return false;
  }

  public boolean equals(ProfileSearchRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_otherProfileTerms = true && this.isSetOtherProfileTerms();
    boolean that_present_otherProfileTerms = true && that.isSetOtherProfileTerms();
    if (this_present_otherProfileTerms || that_present_otherProfileTerms) {
      if (!(this_present_otherProfileTerms && that_present_otherProfileTerms))
        return false;
      if (!this.otherProfileTerms.equals(that.otherProfileTerms))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOtherProfileTerms()) ? 131071 : 524287);
    if (isSetOtherProfileTerms())
      hashCode = hashCode * 8191 + otherProfileTerms.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileSearchRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOtherProfileTerms(), other.isSetOtherProfileTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherProfileTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherProfileTerms, other.otherProfileTerms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProfileSearchRecord(");
    boolean first = true;

    sb.append("otherProfileTerms:");
    if (this.otherProfileTerms == null) {
      sb.append("null");
    } else {
      sb.append(this.otherProfileTerms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileSearchRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ProfileSearchRecordStandardScheme getScheme() {
      return new ProfileSearchRecordStandardScheme();
    }
  }

  private static class ProfileSearchRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileSearchRecord> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OTHER_PROFILE_TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set230 = iprot.readSetBegin();
                struct.otherProfileTerms = new java.util.HashSet<java.lang.String>(2*_set230.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem231;
                for (int _i232 = 0; _i232 < _set230.size; ++_i232)
                {
                  _elem231 = iprot.readString();
                  struct.otherProfileTerms.add(_elem231);
                }
                iprot.readSetEnd();
              }
              struct.setOtherProfileTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileSearchRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.otherProfileTerms != null) {
        oprot.writeFieldBegin(OTHER_PROFILE_TERMS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.otherProfileTerms.size()));
          for (java.lang.String _iter233 : struct.otherProfileTerms)
          {
            oprot.writeString(_iter233);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileSearchRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ProfileSearchRecordTupleScheme getScheme() {
      return new ProfileSearchRecordTupleScheme();
    }
  }

  private static class ProfileSearchRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileSearchRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOtherProfileTerms()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOtherProfileTerms()) {
        {
          oprot.writeI32(struct.otherProfileTerms.size());
          for (java.lang.String _iter234 : struct.otherProfileTerms)
          {
            oprot.writeString(_iter234);
          }
        }
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileSearchRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set235 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
          struct.otherProfileTerms = new java.util.HashSet<java.lang.String>(2*_set235.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem236;
          for (int _i237 = 0; _i237 < _set235.size; ++_i237)
          {
            _elem236 = iprot.readString();
            struct.otherProfileTerms.add(_elem236);
          }
        }
        struct.setOtherProfileTermsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

