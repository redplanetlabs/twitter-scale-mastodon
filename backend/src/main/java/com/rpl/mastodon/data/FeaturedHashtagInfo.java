/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class FeaturedHashtagInfo implements org.apache.thrift.TBase<FeaturedHashtagInfo, FeaturedHashtagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FeaturedHashtagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeaturedHashtagInfo");

  private static final org.apache.thrift.protocol.TField HASHTAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtag", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("numStatuses", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FeaturedHashtagInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FeaturedHashtagInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String hashtag; // required
  public int numStatuses; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HASHTAG((short)1, "hashtag"),
    NUM_STATUSES((short)2, "numStatuses"),
    TIMESTAMP((short)3, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HASHTAG
          return HASHTAG;
        case 2: // NUM_STATUSES
          return NUM_STATUSES;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMSTATUSES_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HASHTAG, new org.apache.thrift.meta_data.FieldMetaData("hashtag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_STATUSES, new org.apache.thrift.meta_data.FieldMetaData("numStatuses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeaturedHashtagInfo.class, metaDataMap);
  }

  public FeaturedHashtagInfo() {
  }

  public FeaturedHashtagInfo(
    java.lang.String hashtag,
    int numStatuses,
    long timestamp)
  {
    this();
    this.hashtag = hashtag;
    this.numStatuses = numStatuses;
    setNumStatusesIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeaturedHashtagInfo(FeaturedHashtagInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHashtag()) {
      this.hashtag = other.hashtag;
    }
    this.numStatuses = other.numStatuses;
    this.timestamp = other.timestamp;
  }

  @Override
  public FeaturedHashtagInfo deepCopy() {
    return new FeaturedHashtagInfo(this);
  }

  @Override
  public void clear() {
    this.hashtag = null;
    setNumStatusesIsSet(false);
    this.numStatuses = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHashtag() {
    return this.hashtag;
  }

  public FeaturedHashtagInfo setHashtag(@org.apache.thrift.annotation.Nullable java.lang.String hashtag) {
    this.hashtag = hashtag;
    return this;
  }

  public void unsetHashtag() {
    this.hashtag = null;
  }

  /** Returns true if field hashtag is set (has been assigned a value) and false otherwise */
  public boolean isSetHashtag() {
    return this.hashtag != null;
  }

  public void setHashtagIsSet(boolean value) {
    if (!value) {
      this.hashtag = null;
    }
  }

  public int getNumStatuses() {
    return this.numStatuses;
  }

  public FeaturedHashtagInfo setNumStatuses(int numStatuses) {
    this.numStatuses = numStatuses;
    setNumStatusesIsSet(true);
    return this;
  }

  public void unsetNumStatuses() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMSTATUSES_ISSET_ID);
  }

  /** Returns true if field numStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetNumStatuses() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMSTATUSES_ISSET_ID);
  }

  public void setNumStatusesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMSTATUSES_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public FeaturedHashtagInfo setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HASHTAG:
      if (value == null) {
        unsetHashtag();
      } else {
        setHashtag((java.lang.String)value);
      }
      break;

    case NUM_STATUSES:
      if (value == null) {
        unsetNumStatuses();
      } else {
        setNumStatuses((java.lang.Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HASHTAG:
      return getHashtag();

    case NUM_STATUSES:
      return getNumStatuses();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HASHTAG:
      return isSetHashtag();
    case NUM_STATUSES:
      return isSetNumStatuses();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FeaturedHashtagInfo)
      return this.equals((FeaturedHashtagInfo)that);
    return false;
  }

  public boolean equals(FeaturedHashtagInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hashtag = true && this.isSetHashtag();
    boolean that_present_hashtag = true && that.isSetHashtag();
    if (this_present_hashtag || that_present_hashtag) {
      if (!(this_present_hashtag && that_present_hashtag))
        return false;
      if (!this.hashtag.equals(that.hashtag))
        return false;
    }

    boolean this_present_numStatuses = true;
    boolean that_present_numStatuses = true;
    if (this_present_numStatuses || that_present_numStatuses) {
      if (!(this_present_numStatuses && that_present_numStatuses))
        return false;
      if (this.numStatuses != that.numStatuses)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHashtag()) ? 131071 : 524287);
    if (isSetHashtag())
      hashCode = hashCode * 8191 + hashtag.hashCode();

    hashCode = hashCode * 8191 + numStatuses;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(FeaturedHashtagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetHashtag(), other.isSetHashtag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashtag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtag, other.hashtag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumStatuses(), other.isSetNumStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numStatuses, other.numStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FeaturedHashtagInfo(");
    boolean first = true;

    sb.append("hashtag:");
    if (this.hashtag == null) {
      sb.append("null");
    } else {
      sb.append(this.hashtag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numStatuses:");
    sb.append(this.numStatuses);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hashtag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hashtag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numStatuses' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeaturedHashtagInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FeaturedHashtagInfoStandardScheme getScheme() {
      return new FeaturedHashtagInfoStandardScheme();
    }
  }

  private static class FeaturedHashtagInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<FeaturedHashtagInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, FeaturedHashtagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HASHTAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hashtag = iprot.readString();
              struct.setHashtagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numStatuses = iprot.readI32();
              struct.setNumStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumStatuses()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numStatuses' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, FeaturedHashtagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hashtag != null) {
        oprot.writeFieldBegin(HASHTAG_FIELD_DESC);
        oprot.writeString(struct.hashtag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_STATUSES_FIELD_DESC);
      oprot.writeI32(struct.numStatuses);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeaturedHashtagInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FeaturedHashtagInfoTupleScheme getScheme() {
      return new FeaturedHashtagInfoTupleScheme();
    }
  }

  private static class FeaturedHashtagInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<FeaturedHashtagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeaturedHashtagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.hashtag);
      oprot.writeI32(struct.numStatuses);
      oprot.writeI64(struct.timestamp);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeaturedHashtagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.hashtag = iprot.readString();
      struct.setHashtagIsSet(true);
      struct.numStatuses = iprot.readI32();
      struct.setNumStatusesIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

