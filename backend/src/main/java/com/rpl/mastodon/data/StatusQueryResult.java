/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class StatusQueryResult implements org.apache.thrift.TBase<StatusQueryResult, StatusQueryResult._Fields>, java.io.Serializable, Cloneable, Comparable<StatusQueryResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusQueryResult");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mentions", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatusQueryResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatusQueryResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable StatusResultWithId result; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,AccountWithId> mentions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    MENTIONS((short)2, "mentions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // MENTIONS
          return MENTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusResultWithId.class)));
    tmpMap.put(_Fields.MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("mentions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountWithId.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusQueryResult.class, metaDataMap);
  }

  public StatusQueryResult() {
  }

  public StatusQueryResult(
    StatusResultWithId result,
    java.util.Map<java.lang.String,AccountWithId> mentions)
  {
    this();
    this.result = result;
    this.mentions = mentions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusQueryResult(StatusQueryResult other) {
    if (other.isSetResult()) {
      this.result = new StatusResultWithId(other.result);
    }
    if (other.isSetMentions()) {
      java.util.Map<java.lang.String,AccountWithId> __this__mentions = new java.util.HashMap<java.lang.String,AccountWithId>(other.mentions.size());
      for (java.util.Map.Entry<java.lang.String, AccountWithId> other_element : other.mentions.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        AccountWithId other_element_value = other_element.getValue();

        java.lang.String __this__mentions_copy_key = other_element_key;

        AccountWithId __this__mentions_copy_value = new AccountWithId(other_element_value);

        __this__mentions.put(__this__mentions_copy_key, __this__mentions_copy_value);
      }
      this.mentions = __this__mentions;
    }
  }

  @Override
  public StatusQueryResult deepCopy() {
    return new StatusQueryResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.mentions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public StatusResultWithId getResult() {
    return this.result;
  }

  public StatusQueryResult setResult(@org.apache.thrift.annotation.Nullable StatusResultWithId result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getMentionsSize() {
    return (this.mentions == null) ? 0 : this.mentions.size();
  }

  public void putToMentions(java.lang.String key, AccountWithId val) {
    if (this.mentions == null) {
      this.mentions = new java.util.HashMap<java.lang.String,AccountWithId>();
    }
    this.mentions.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,AccountWithId> getMentions() {
    return this.mentions;
  }

  public StatusQueryResult setMentions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,AccountWithId> mentions) {
    this.mentions = mentions;
    return this;
  }

  public void unsetMentions() {
    this.mentions = null;
  }

  /** Returns true if field mentions is set (has been assigned a value) and false otherwise */
  public boolean isSetMentions() {
    return this.mentions != null;
  }

  public void setMentionsIsSet(boolean value) {
    if (!value) {
      this.mentions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((StatusResultWithId)value);
      }
      break;

    case MENTIONS:
      if (value == null) {
        unsetMentions();
      } else {
        setMentions((java.util.Map<java.lang.String,AccountWithId>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case MENTIONS:
      return getMentions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case MENTIONS:
      return isSetMentions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StatusQueryResult)
      return this.equals((StatusQueryResult)that);
    return false;
  }

  public boolean equals(StatusQueryResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_mentions = true && this.isSetMentions();
    boolean that_present_mentions = true && that.isSetMentions();
    if (this_present_mentions || that_present_mentions) {
      if (!(this_present_mentions && that_present_mentions))
        return false;
      if (!this.mentions.equals(that.mentions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
    if (isSetResult())
      hashCode = hashCode * 8191 + result.hashCode();

    hashCode = hashCode * 8191 + ((isSetMentions()) ? 131071 : 524287);
    if (isSetMentions())
      hashCode = hashCode * 8191 + mentions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StatusQueryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetResult(), other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMentions(), other.isSetMentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentions, other.mentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StatusQueryResult(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mentions:");
    if (this.mentions == null) {
      sb.append("null");
    } else {
      sb.append(this.mentions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (result == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result' was not present! Struct: " + toString());
    }
    if (mentions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mentions' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (result != null) {
      result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusQueryResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusQueryResultStandardScheme getScheme() {
      return new StatusQueryResultStandardScheme();
    }
  }

  private static class StatusQueryResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatusQueryResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new StatusResultWithId();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin();
                struct.mentions = new java.util.HashMap<java.lang.String,AccountWithId>(2*_map164.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key165;
                @org.apache.thrift.annotation.Nullable AccountWithId _val166;
                for (int _i167 = 0; _i167 < _map164.size; ++_i167)
                {
                  _key165 = iprot.readString();
                  _val166 = new AccountWithId();
                  _val166.read(iprot);
                  struct.mentions.put(_key165, _val166);
                }
                iprot.readMapEnd();
              }
              struct.setMentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusQueryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        struct.result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mentions != null) {
        oprot.writeFieldBegin(MENTIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mentions.size()));
          for (java.util.Map.Entry<java.lang.String, AccountWithId> _iter168 : struct.mentions.entrySet())
          {
            oprot.writeString(_iter168.getKey());
            _iter168.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusQueryResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusQueryResultTupleScheme getScheme() {
      return new StatusQueryResultTupleScheme();
    }
  }

  private static class StatusQueryResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatusQueryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.result.write(oprot);
      {
        oprot.writeI32(struct.mentions.size());
        for (java.util.Map.Entry<java.lang.String, AccountWithId> _iter169 : struct.mentions.entrySet())
        {
          oprot.writeString(_iter169.getKey());
          _iter169.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.result = new StatusResultWithId();
      struct.result.read(iprot);
      struct.setResultIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
        struct.mentions = new java.util.HashMap<java.lang.String,AccountWithId>(2*_map170.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key171;
        @org.apache.thrift.annotation.Nullable AccountWithId _val172;
        for (int _i173 = 0; _i173 < _map170.size; ++_i173)
        {
          _key171 = iprot.readString();
          _val172 = new AccountWithId();
          _val172.read(iprot);
          struct.mentions.put(_key171, _val172);
        }
      }
      struct.setMentionsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

