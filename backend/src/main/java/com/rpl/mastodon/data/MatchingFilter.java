/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class MatchingFilter implements org.apache.thrift.TBase<MatchingFilter, MatchingFilter._Fields>, java.io.Serializable, Cloneable, Comparable<MatchingFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchingFilter");

  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filterId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField KEYWORD_MATCHES_FIELD_DESC = new org.apache.thrift.protocol.TField("keywordMatches", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FILTER_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("statusFilterMatch", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MatchingFilterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MatchingFilterTupleSchemeFactory();

  public long filterId; // required
  public @org.apache.thrift.annotation.Nullable Filter filter; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<KeywordFilter> keywordMatches; // required
  public boolean statusFilterMatch; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER_ID((short)1, "filterId"),
    FILTER((short)2, "filter"),
    KEYWORD_MATCHES((short)3, "keywordMatches"),
    STATUS_FILTER_MATCH((short)4, "statusFilterMatch");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER_ID
          return FILTER_ID;
        case 2: // FILTER
          return FILTER;
        case 3: // KEYWORD_MATCHES
          return KEYWORD_MATCHES;
        case 4: // STATUS_FILTER_MATCH
          return STATUS_FILTER_MATCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTERID_ISSET_ID = 0;
  private static final int __STATUSFILTERMATCH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filterId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "FilterId")));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Filter.class)));
    tmpMap.put(_Fields.KEYWORD_MATCHES, new org.apache.thrift.meta_data.FieldMetaData("keywordMatches", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeywordFilter.class))));
    tmpMap.put(_Fields.STATUS_FILTER_MATCH, new org.apache.thrift.meta_data.FieldMetaData("statusFilterMatch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchingFilter.class, metaDataMap);
  }

  public MatchingFilter() {
  }

  public MatchingFilter(
    long filterId,
    Filter filter,
    java.util.List<KeywordFilter> keywordMatches,
    boolean statusFilterMatch)
  {
    this();
    this.filterId = filterId;
    setFilterIdIsSet(true);
    this.filter = filter;
    this.keywordMatches = keywordMatches;
    this.statusFilterMatch = statusFilterMatch;
    setStatusFilterMatchIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchingFilter(MatchingFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filterId = other.filterId;
    if (other.isSetFilter()) {
      this.filter = new Filter(other.filter);
    }
    if (other.isSetKeywordMatches()) {
      java.util.List<KeywordFilter> __this__keywordMatches = new java.util.ArrayList<KeywordFilter>(other.keywordMatches.size());
      for (KeywordFilter other_element : other.keywordMatches) {
        __this__keywordMatches.add(new KeywordFilter(other_element));
      }
      this.keywordMatches = __this__keywordMatches;
    }
    this.statusFilterMatch = other.statusFilterMatch;
  }

  @Override
  public MatchingFilter deepCopy() {
    return new MatchingFilter(this);
  }

  @Override
  public void clear() {
    setFilterIdIsSet(false);
    this.filterId = 0;
    this.filter = null;
    this.keywordMatches = null;
    setStatusFilterMatchIsSet(false);
    this.statusFilterMatch = false;
  }

  public long getFilterId() {
    return this.filterId;
  }

  public MatchingFilter setFilterId(long filterId) {
    this.filterId = filterId;
    setFilterIdIsSet(true);
    return this;
  }

  public void unsetFilterId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTERID_ISSET_ID);
  }

  /** Returns true if field filterId is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTERID_ISSET_ID);
  }

  public void setFilterIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTERID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Filter getFilter() {
    return this.filter;
  }

  public MatchingFilter setFilter(@org.apache.thrift.annotation.Nullable Filter filter) {
    this.filter = filter;
    return this;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  public int getKeywordMatchesSize() {
    return (this.keywordMatches == null) ? 0 : this.keywordMatches.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<KeywordFilter> getKeywordMatchesIterator() {
    return (this.keywordMatches == null) ? null : this.keywordMatches.iterator();
  }

  public void addToKeywordMatches(KeywordFilter elem) {
    if (this.keywordMatches == null) {
      this.keywordMatches = new java.util.ArrayList<KeywordFilter>();
    }
    this.keywordMatches.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<KeywordFilter> getKeywordMatches() {
    return this.keywordMatches;
  }

  public MatchingFilter setKeywordMatches(@org.apache.thrift.annotation.Nullable java.util.List<KeywordFilter> keywordMatches) {
    this.keywordMatches = keywordMatches;
    return this;
  }

  public void unsetKeywordMatches() {
    this.keywordMatches = null;
  }

  /** Returns true if field keywordMatches is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywordMatches() {
    return this.keywordMatches != null;
  }

  public void setKeywordMatchesIsSet(boolean value) {
    if (!value) {
      this.keywordMatches = null;
    }
  }

  public boolean isStatusFilterMatch() {
    return this.statusFilterMatch;
  }

  public MatchingFilter setStatusFilterMatch(boolean statusFilterMatch) {
    this.statusFilterMatch = statusFilterMatch;
    setStatusFilterMatchIsSet(true);
    return this;
  }

  public void unsetStatusFilterMatch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSFILTERMATCH_ISSET_ID);
  }

  /** Returns true if field statusFilterMatch is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusFilterMatch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSFILTERMATCH_ISSET_ID);
  }

  public void setStatusFilterMatchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSFILTERMATCH_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILTER_ID:
      if (value == null) {
        unsetFilterId();
      } else {
        setFilterId((java.lang.Long)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((Filter)value);
      }
      break;

    case KEYWORD_MATCHES:
      if (value == null) {
        unsetKeywordMatches();
      } else {
        setKeywordMatches((java.util.List<KeywordFilter>)value);
      }
      break;

    case STATUS_FILTER_MATCH:
      if (value == null) {
        unsetStatusFilterMatch();
      } else {
        setStatusFilterMatch((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER_ID:
      return getFilterId();

    case FILTER:
      return getFilter();

    case KEYWORD_MATCHES:
      return getKeywordMatches();

    case STATUS_FILTER_MATCH:
      return isStatusFilterMatch();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILTER_ID:
      return isSetFilterId();
    case FILTER:
      return isSetFilter();
    case KEYWORD_MATCHES:
      return isSetKeywordMatches();
    case STATUS_FILTER_MATCH:
      return isSetStatusFilterMatch();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MatchingFilter)
      return this.equals((MatchingFilter)that);
    return false;
  }

  public boolean equals(MatchingFilter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filterId = true;
    boolean that_present_filterId = true;
    if (this_present_filterId || that_present_filterId) {
      if (!(this_present_filterId && that_present_filterId))
        return false;
      if (this.filterId != that.filterId)
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    boolean this_present_keywordMatches = true && this.isSetKeywordMatches();
    boolean that_present_keywordMatches = true && that.isSetKeywordMatches();
    if (this_present_keywordMatches || that_present_keywordMatches) {
      if (!(this_present_keywordMatches && that_present_keywordMatches))
        return false;
      if (!this.keywordMatches.equals(that.keywordMatches))
        return false;
    }

    boolean this_present_statusFilterMatch = true;
    boolean that_present_statusFilterMatch = true;
    if (this_present_statusFilterMatch || that_present_statusFilterMatch) {
      if (!(this_present_statusFilterMatch && that_present_statusFilterMatch))
        return false;
      if (this.statusFilterMatch != that.statusFilterMatch)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(filterId);

    hashCode = hashCode * 8191 + ((isSetFilter()) ? 131071 : 524287);
    if (isSetFilter())
      hashCode = hashCode * 8191 + filter.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeywordMatches()) ? 131071 : 524287);
    if (isSetKeywordMatches())
      hashCode = hashCode * 8191 + keywordMatches.hashCode();

    hashCode = hashCode * 8191 + ((statusFilterMatch) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(MatchingFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilterId(), other.isSetFilterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterId, other.filterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilter(), other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeywordMatches(), other.isSetKeywordMatches());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywordMatches()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywordMatches, other.keywordMatches);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatusFilterMatch(), other.isSetStatusFilterMatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusFilterMatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusFilterMatch, other.statusFilterMatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MatchingFilter(");
    boolean first = true;

    sb.append("filterId:");
    sb.append(this.filterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter:");
    if (this.filter == null) {
      sb.append("null");
    } else {
      sb.append(this.filter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywordMatches:");
    if (this.keywordMatches == null) {
      sb.append("null");
    } else {
      sb.append(this.keywordMatches);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusFilterMatch:");
    sb.append(this.statusFilterMatch);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'filterId' because it's a primitive and you chose the non-beans generator.
    if (filter == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filter' was not present! Struct: " + toString());
    }
    if (keywordMatches == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keywordMatches' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'statusFilterMatch' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (filter != null) {
      filter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchingFilterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MatchingFilterStandardScheme getScheme() {
      return new MatchingFilterStandardScheme();
    }
  }

  private static class MatchingFilterStandardScheme extends org.apache.thrift.scheme.StandardScheme<MatchingFilter> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchingFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filterId = iprot.readI64();
              struct.setFilterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.filter = new Filter();
              struct.filter.read(iprot);
              struct.setFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYWORD_MATCHES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                struct.keywordMatches = new java.util.ArrayList<KeywordFilter>(_list206.size);
                @org.apache.thrift.annotation.Nullable KeywordFilter _elem207;
                for (int _i208 = 0; _i208 < _list206.size; ++_i208)
                {
                  _elem207 = new KeywordFilter();
                  _elem207.read(iprot);
                  struct.keywordMatches.add(_elem207);
                }
                iprot.readListEnd();
              }
              struct.setKeywordMatchesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS_FILTER_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusFilterMatch = iprot.readBool();
              struct.setStatusFilterMatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFilterId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filterId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatusFilterMatch()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusFilterMatch' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchingFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
      oprot.writeI64(struct.filterId);
      oprot.writeFieldEnd();
      if (struct.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        struct.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keywordMatches != null) {
        oprot.writeFieldBegin(KEYWORD_MATCHES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keywordMatches.size()));
          for (KeywordFilter _iter209 : struct.keywordMatches)
          {
            _iter209.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FILTER_MATCH_FIELD_DESC);
      oprot.writeBool(struct.statusFilterMatch);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchingFilterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MatchingFilterTupleScheme getScheme() {
      return new MatchingFilterTupleScheme();
    }
  }

  private static class MatchingFilterTupleScheme extends org.apache.thrift.scheme.TupleScheme<MatchingFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchingFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.filterId);
      struct.filter.write(oprot);
      {
        oprot.writeI32(struct.keywordMatches.size());
        for (KeywordFilter _iter210 : struct.keywordMatches)
        {
          _iter210.write(oprot);
        }
      }
      oprot.writeBool(struct.statusFilterMatch);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchingFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.filterId = iprot.readI64();
      struct.setFilterIdIsSet(true);
      struct.filter = new Filter();
      struct.filter.read(iprot);
      struct.setFilterIsSet(true);
      {
        org.apache.thrift.protocol.TList _list211 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.keywordMatches = new java.util.ArrayList<KeywordFilter>(_list211.size);
        @org.apache.thrift.annotation.Nullable KeywordFilter _elem212;
        for (int _i213 = 0; _i213 < _list211.size; ++_i213)
        {
          _elem212 = new KeywordFilter();
          _elem212.read(iprot);
          struct.keywordMatches.add(_elem212);
        }
      }
      struct.setKeywordMatchesIsSet(true);
      struct.statusFilterMatch = iprot.readBool();
      struct.setStatusFilterMatchIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

