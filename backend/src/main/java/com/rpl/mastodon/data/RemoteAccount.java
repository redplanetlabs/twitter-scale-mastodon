/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class RemoteAccount implements org.apache.thrift.TBase<RemoteAccount, RemoteAccount._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteAccount");

  private static final org.apache.thrift.protocol.TField MAIN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mainUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INBOX_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHARED_INBOX_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedInboxUrl", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RemoteAccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RemoteAccountTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String mainUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String inboxUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sharedInboxUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAIN_URL((short)1, "mainUrl"),
    INBOX_URL((short)2, "inboxUrl"),
    SHARED_INBOX_URL((short)3, "sharedInboxUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAIN_URL
          return MAIN_URL;
        case 2: // INBOX_URL
          return INBOX_URL;
        case 3: // SHARED_INBOX_URL
          return SHARED_INBOX_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAIN_URL, new org.apache.thrift.meta_data.FieldMetaData("mainUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INBOX_URL, new org.apache.thrift.meta_data.FieldMetaData("inboxUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARED_INBOX_URL, new org.apache.thrift.meta_data.FieldMetaData("sharedInboxUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoteAccount.class, metaDataMap);
  }

  public RemoteAccount() {
  }

  public RemoteAccount(
    java.lang.String mainUrl,
    java.lang.String inboxUrl,
    java.lang.String sharedInboxUrl)
  {
    this();
    this.mainUrl = mainUrl;
    this.inboxUrl = inboxUrl;
    this.sharedInboxUrl = sharedInboxUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoteAccount(RemoteAccount other) {
    if (other.isSetMainUrl()) {
      this.mainUrl = other.mainUrl;
    }
    if (other.isSetInboxUrl()) {
      this.inboxUrl = other.inboxUrl;
    }
    if (other.isSetSharedInboxUrl()) {
      this.sharedInboxUrl = other.sharedInboxUrl;
    }
  }

  @Override
  public RemoteAccount deepCopy() {
    return new RemoteAccount(this);
  }

  @Override
  public void clear() {
    this.mainUrl = null;
    this.inboxUrl = null;
    this.sharedInboxUrl = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMainUrl() {
    return this.mainUrl;
  }

  public RemoteAccount setMainUrl(@org.apache.thrift.annotation.Nullable java.lang.String mainUrl) {
    this.mainUrl = mainUrl;
    return this;
  }

  public void unsetMainUrl() {
    this.mainUrl = null;
  }

  /** Returns true if field mainUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMainUrl() {
    return this.mainUrl != null;
  }

  public void setMainUrlIsSet(boolean value) {
    if (!value) {
      this.mainUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInboxUrl() {
    return this.inboxUrl;
  }

  public RemoteAccount setInboxUrl(@org.apache.thrift.annotation.Nullable java.lang.String inboxUrl) {
    this.inboxUrl = inboxUrl;
    return this;
  }

  public void unsetInboxUrl() {
    this.inboxUrl = null;
  }

  /** Returns true if field inboxUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxUrl() {
    return this.inboxUrl != null;
  }

  public void setInboxUrlIsSet(boolean value) {
    if (!value) {
      this.inboxUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSharedInboxUrl() {
    return this.sharedInboxUrl;
  }

  public RemoteAccount setSharedInboxUrl(@org.apache.thrift.annotation.Nullable java.lang.String sharedInboxUrl) {
    this.sharedInboxUrl = sharedInboxUrl;
    return this;
  }

  public void unsetSharedInboxUrl() {
    this.sharedInboxUrl = null;
  }

  /** Returns true if field sharedInboxUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedInboxUrl() {
    return this.sharedInboxUrl != null;
  }

  public void setSharedInboxUrlIsSet(boolean value) {
    if (!value) {
      this.sharedInboxUrl = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MAIN_URL:
      if (value == null) {
        unsetMainUrl();
      } else {
        setMainUrl((java.lang.String)value);
      }
      break;

    case INBOX_URL:
      if (value == null) {
        unsetInboxUrl();
      } else {
        setInboxUrl((java.lang.String)value);
      }
      break;

    case SHARED_INBOX_URL:
      if (value == null) {
        unsetSharedInboxUrl();
      } else {
        setSharedInboxUrl((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MAIN_URL:
      return getMainUrl();

    case INBOX_URL:
      return getInboxUrl();

    case SHARED_INBOX_URL:
      return getSharedInboxUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MAIN_URL:
      return isSetMainUrl();
    case INBOX_URL:
      return isSetInboxUrl();
    case SHARED_INBOX_URL:
      return isSetSharedInboxUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof RemoteAccount)
      return this.equals((RemoteAccount)that);
    return false;
  }

  public boolean equals(RemoteAccount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mainUrl = true && this.isSetMainUrl();
    boolean that_present_mainUrl = true && that.isSetMainUrl();
    if (this_present_mainUrl || that_present_mainUrl) {
      if (!(this_present_mainUrl && that_present_mainUrl))
        return false;
      if (!this.mainUrl.equals(that.mainUrl))
        return false;
    }

    boolean this_present_inboxUrl = true && this.isSetInboxUrl();
    boolean that_present_inboxUrl = true && that.isSetInboxUrl();
    if (this_present_inboxUrl || that_present_inboxUrl) {
      if (!(this_present_inboxUrl && that_present_inboxUrl))
        return false;
      if (!this.inboxUrl.equals(that.inboxUrl))
        return false;
    }

    boolean this_present_sharedInboxUrl = true && this.isSetSharedInboxUrl();
    boolean that_present_sharedInboxUrl = true && that.isSetSharedInboxUrl();
    if (this_present_sharedInboxUrl || that_present_sharedInboxUrl) {
      if (!(this_present_sharedInboxUrl && that_present_sharedInboxUrl))
        return false;
      if (!this.sharedInboxUrl.equals(that.sharedInboxUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMainUrl()) ? 131071 : 524287);
    if (isSetMainUrl())
      hashCode = hashCode * 8191 + mainUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetInboxUrl()) ? 131071 : 524287);
    if (isSetInboxUrl())
      hashCode = hashCode * 8191 + inboxUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetSharedInboxUrl()) ? 131071 : 524287);
    if (isSetSharedInboxUrl())
      hashCode = hashCode * 8191 + sharedInboxUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RemoteAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMainUrl(), other.isSetMainUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainUrl, other.mainUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInboxUrl(), other.isSetInboxUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxUrl, other.inboxUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSharedInboxUrl(), other.isSetSharedInboxUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedInboxUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedInboxUrl, other.sharedInboxUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RemoteAccount(");
    boolean first = true;

    sb.append("mainUrl:");
    if (this.mainUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.mainUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inboxUrl:");
    if (this.inboxUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.inboxUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedInboxUrl:");
    if (this.sharedInboxUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.sharedInboxUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mainUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mainUrl' was not present! Struct: " + toString());
    }
    if (inboxUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'inboxUrl' was not present! Struct: " + toString());
    }
    if (sharedInboxUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sharedInboxUrl' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemoteAccountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RemoteAccountStandardScheme getScheme() {
      return new RemoteAccountStandardScheme();
    }
  }

  private static class RemoteAccountStandardScheme extends org.apache.thrift.scheme.StandardScheme<RemoteAccount> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, RemoteAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAIN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mainUrl = iprot.readString();
              struct.setMainUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INBOX_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inboxUrl = iprot.readString();
              struct.setInboxUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHARED_INBOX_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sharedInboxUrl = iprot.readString();
              struct.setSharedInboxUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, RemoteAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mainUrl != null) {
        oprot.writeFieldBegin(MAIN_URL_FIELD_DESC);
        oprot.writeString(struct.mainUrl);
        oprot.writeFieldEnd();
      }
      if (struct.inboxUrl != null) {
        oprot.writeFieldBegin(INBOX_URL_FIELD_DESC);
        oprot.writeString(struct.inboxUrl);
        oprot.writeFieldEnd();
      }
      if (struct.sharedInboxUrl != null) {
        oprot.writeFieldBegin(SHARED_INBOX_URL_FIELD_DESC);
        oprot.writeString(struct.sharedInboxUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemoteAccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RemoteAccountTupleScheme getScheme() {
      return new RemoteAccountTupleScheme();
    }
  }

  private static class RemoteAccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<RemoteAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RemoteAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.mainUrl);
      oprot.writeString(struct.inboxUrl);
      oprot.writeString(struct.sharedInboxUrl);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RemoteAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.mainUrl = iprot.readString();
      struct.setMainUrlIsSet(true);
      struct.inboxUrl = iprot.readString();
      struct.setInboxUrlIsSet(true);
      struct.sharedInboxUrl = iprot.readString();
      struct.setSharedInboxUrlIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

