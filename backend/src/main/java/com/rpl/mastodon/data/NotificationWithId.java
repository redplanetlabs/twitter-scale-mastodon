/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class NotificationWithId implements org.apache.thrift.TBase<NotificationWithId, NotificationWithId._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationWithId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationWithId");

  private static final org.apache.thrift.protocol.TField NOTIFICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotificationWithIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotificationWithIdTupleSchemeFactory();

  public long notificationId; // required
  public @org.apache.thrift.annotation.Nullable Notification notification; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFICATION_ID((short)1, "notificationId"),
    NOTIFICATION((short)2, "notification");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTIFICATION_ID
          return NOTIFICATION_ID;
        case 2: // NOTIFICATION
          return NOTIFICATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notificationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Notification.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationWithId.class, metaDataMap);
  }

  public NotificationWithId() {
  }

  public NotificationWithId(
    long notificationId,
    Notification notification)
  {
    this();
    this.notificationId = notificationId;
    setNotificationIdIsSet(true);
    this.notification = notification;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationWithId(NotificationWithId other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notificationId = other.notificationId;
    if (other.isSetNotification()) {
      this.notification = new Notification(other.notification);
    }
  }

  @Override
  public NotificationWithId deepCopy() {
    return new NotificationWithId(this);
  }

  @Override
  public void clear() {
    setNotificationIdIsSet(false);
    this.notificationId = 0;
    this.notification = null;
  }

  public long getNotificationId() {
    return this.notificationId;
  }

  public NotificationWithId setNotificationId(long notificationId) {
    this.notificationId = notificationId;
    setNotificationIdIsSet(true);
    return this;
  }

  public void unsetNotificationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID);
  }

  /** Returns true if field notificationId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID);
  }

  public void setNotificationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Notification getNotification() {
    return this.notification;
  }

  public NotificationWithId setNotification(@org.apache.thrift.annotation.Nullable Notification notification) {
    this.notification = notification;
    return this;
  }

  public void unsetNotification() {
    this.notification = null;
  }

  /** Returns true if field notification is set (has been assigned a value) and false otherwise */
  public boolean isSetNotification() {
    return this.notification != null;
  }

  public void setNotificationIsSet(boolean value) {
    if (!value) {
      this.notification = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NOTIFICATION_ID:
      if (value == null) {
        unsetNotificationId();
      } else {
        setNotificationId((java.lang.Long)value);
      }
      break;

    case NOTIFICATION:
      if (value == null) {
        unsetNotification();
      } else {
        setNotification((Notification)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFICATION_ID:
      return getNotificationId();

    case NOTIFICATION:
      return getNotification();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NOTIFICATION_ID:
      return isSetNotificationId();
    case NOTIFICATION:
      return isSetNotification();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NotificationWithId)
      return this.equals((NotificationWithId)that);
    return false;
  }

  public boolean equals(NotificationWithId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_notificationId = true;
    boolean that_present_notificationId = true;
    if (this_present_notificationId || that_present_notificationId) {
      if (!(this_present_notificationId && that_present_notificationId))
        return false;
      if (this.notificationId != that.notificationId)
        return false;
    }

    boolean this_present_notification = true && this.isSetNotification();
    boolean that_present_notification = true && that.isSetNotification();
    if (this_present_notification || that_present_notification) {
      if (!(this_present_notification && that_present_notification))
        return false;
      if (!this.notification.equals(that.notification))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(notificationId);

    hashCode = hashCode * 8191 + ((isSetNotification()) ? 131071 : 524287);
    if (isSetNotification())
      hashCode = hashCode * 8191 + notification.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NotificationWithId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNotificationId(), other.isSetNotificationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationId, other.notificationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNotification(), other.isSetNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NotificationWithId(");
    boolean first = true;

    sb.append("notificationId:");
    sb.append(this.notificationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notification:");
    if (this.notification == null) {
      sb.append("null");
    } else {
      sb.append(this.notification);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'notificationId' because it's a primitive and you chose the non-beans generator.
    if (notification == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'notification' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (notification != null) {
      notification.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationWithIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NotificationWithIdStandardScheme getScheme() {
      return new NotificationWithIdStandardScheme();
    }
  }

  private static class NotificationWithIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotificationWithId> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTIFICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.notificationId = iprot.readI64();
              struct.setNotificationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.notification = new Notification();
              struct.notification.read(iprot);
              struct.setNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNotificationId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notificationId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationWithId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFICATION_ID_FIELD_DESC);
      oprot.writeI64(struct.notificationId);
      oprot.writeFieldEnd();
      if (struct.notification != null) {
        oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
        struct.notification.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationWithIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NotificationWithIdTupleScheme getScheme() {
      return new NotificationWithIdTupleScheme();
    }
  }

  private static class NotificationWithIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotificationWithId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotificationWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.notificationId);
      struct.notification.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotificationWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.notificationId = iprot.readI64();
      struct.setNotificationIdIsSet(true);
      struct.notification = new Notification();
      struct.notification.read(iprot);
      struct.setNotificationIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

