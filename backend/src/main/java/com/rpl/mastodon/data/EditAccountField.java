/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class EditAccountField extends org.apache.thrift.TUnion<EditAccountField, EditAccountField._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EditAccountField");
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PWD_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdHash", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BIO_FIELD_DESC = new org.apache.thrift.protocol.TField("bio", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField BOT_FIELD_DESC = new org.apache.thrift.protocol.TField("bot", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DISCOVERABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("discoverable", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MARKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("markers", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField PREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("preferences", org.apache.thrift.protocol.TType.MAP, (short)15);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMAIL((short)1, "email"),
    PWD_HASH((short)2, "pwdHash"),
    LOCALE((short)3, "locale"),
    PUBLIC_KEY((short)4, "publicKey"),
    CONTENT((short)5, "content"),
    DISPLAY_NAME((short)6, "displayName"),
    BIO((short)7, "bio"),
    LOCKED((short)8, "locked"),
    BOT((short)9, "bot"),
    DISCOVERABLE((short)10, "discoverable"),
    HEADER((short)11, "header"),
    AVATAR((short)12, "avatar"),
    FIELDS((short)13, "fields"),
    MARKERS((short)14, "markers"),
    PREFERENCES((short)15, "preferences");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMAIL
          return EMAIL;
        case 2: // PWD_HASH
          return PWD_HASH;
        case 3: // LOCALE
          return LOCALE;
        case 4: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 5: // CONTENT
          return CONTENT;
        case 6: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 7: // BIO
          return BIO;
        case 8: // LOCKED
          return LOCKED;
        case 9: // BOT
          return BOT;
        case 10: // DISCOVERABLE
          return DISCOVERABLE;
        case 11: // HEADER
          return HEADER;
        case 12: // AVATAR
          return AVATAR;
        case 13: // FIELDS
          return FIELDS;
        case 14: // MARKERS
          return MARKERS;
        case 15: // PREFERENCES
          return PREFERENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PWD_HASH, new org.apache.thrift.meta_data.FieldMetaData("pwdHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountContent.class)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIO, new org.apache.thrift.meta_data.FieldMetaData("bio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOT, new org.apache.thrift.meta_data.FieldMetaData("bot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISCOVERABLE, new org.apache.thrift.meta_data.FieldMetaData("discoverable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttachmentWithId.class)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttachmentWithId.class)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValuePair.class))));
    tmpMap.put(_Fields.MARKERS, new org.apache.thrift.meta_data.FieldMetaData("markers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Marker.class))));
    tmpMap.put(_Fields.PREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("preferences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EditAccountField.class, metaDataMap);
  }

  public EditAccountField() {
    super();
  }

  public EditAccountField(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public EditAccountField(EditAccountField other) {
    super(other);
  }
  @Override
  public EditAccountField deepCopy() {
    return new EditAccountField(this);
  }

  public static EditAccountField email(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setEmail(value);
    return x;
  }

  public static EditAccountField pwdHash(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setPwdHash(value);
    return x;
  }

  public static EditAccountField locale(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setLocale(value);
    return x;
  }

  public static EditAccountField publicKey(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setPublicKey(value);
    return x;
  }

  public static EditAccountField content(AccountContent value) {
    EditAccountField x = new EditAccountField();
    x.setContent(value);
    return x;
  }

  public static EditAccountField displayName(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setDisplayName(value);
    return x;
  }

  public static EditAccountField bio(java.lang.String value) {
    EditAccountField x = new EditAccountField();
    x.setBio(value);
    return x;
  }

  public static EditAccountField locked(boolean value) {
    EditAccountField x = new EditAccountField();
    x.setLocked(value);
    return x;
  }

  public static EditAccountField bot(boolean value) {
    EditAccountField x = new EditAccountField();
    x.setBot(value);
    return x;
  }

  public static EditAccountField discoverable(boolean value) {
    EditAccountField x = new EditAccountField();
    x.setDiscoverable(value);
    return x;
  }

  public static EditAccountField header(AttachmentWithId value) {
    EditAccountField x = new EditAccountField();
    x.setHeader(value);
    return x;
  }

  public static EditAccountField avatar(AttachmentWithId value) {
    EditAccountField x = new EditAccountField();
    x.setAvatar(value);
    return x;
  }

  public static EditAccountField fields(java.util.List<KeyValuePair> value) {
    EditAccountField x = new EditAccountField();
    x.setFields(value);
    return x;
  }

  public static EditAccountField markers(java.util.Map<java.lang.String,Marker> value) {
    EditAccountField x = new EditAccountField();
    x.setMarkers(value);
    return x;
  }

  public static EditAccountField preferences(java.util.Map<java.lang.String,java.lang.String> value) {
    EditAccountField x = new EditAccountField();
    x.setPreferences(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case EMAIL:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'email', but got " + value.getClass().getSimpleName());
      case PWD_HASH:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'pwdHash', but got " + value.getClass().getSimpleName());
      case LOCALE:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'locale', but got " + value.getClass().getSimpleName());
      case PUBLIC_KEY:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'publicKey', but got " + value.getClass().getSimpleName());
      case CONTENT:
        if (value instanceof AccountContent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AccountContent for field 'content', but got " + value.getClass().getSimpleName());
      case DISPLAY_NAME:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'displayName', but got " + value.getClass().getSimpleName());
      case BIO:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'bio', but got " + value.getClass().getSimpleName());
      case LOCKED:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'locked', but got " + value.getClass().getSimpleName());
      case BOT:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'bot', but got " + value.getClass().getSimpleName());
      case DISCOVERABLE:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'discoverable', but got " + value.getClass().getSimpleName());
      case HEADER:
        if (value instanceof AttachmentWithId) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AttachmentWithId for field 'header', but got " + value.getClass().getSimpleName());
      case AVATAR:
        if (value instanceof AttachmentWithId) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AttachmentWithId for field 'avatar', but got " + value.getClass().getSimpleName());
      case FIELDS:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<KeyValuePair> for field 'fields', but got " + value.getClass().getSimpleName());
      case MARKERS:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,Marker> for field 'markers', but got " + value.getClass().getSimpleName());
      case PREFERENCES:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,java.lang.String> for field 'preferences', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case EMAIL:
          if (field.type == EMAIL_FIELD_DESC.type) {
            java.lang.String email;
            email = iprot.readString();
            return email;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PWD_HASH:
          if (field.type == PWD_HASH_FIELD_DESC.type) {
            java.lang.String pwdHash;
            pwdHash = iprot.readString();
            return pwdHash;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCALE:
          if (field.type == LOCALE_FIELD_DESC.type) {
            java.lang.String locale;
            locale = iprot.readString();
            return locale;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PUBLIC_KEY:
          if (field.type == PUBLIC_KEY_FIELD_DESC.type) {
            java.lang.String publicKey;
            publicKey = iprot.readString();
            return publicKey;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTENT:
          if (field.type == CONTENT_FIELD_DESC.type) {
            AccountContent content;
            content = new AccountContent();
            content.read(iprot);
            return content;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DISPLAY_NAME:
          if (field.type == DISPLAY_NAME_FIELD_DESC.type) {
            java.lang.String displayName;
            displayName = iprot.readString();
            return displayName;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BIO:
          if (field.type == BIO_FIELD_DESC.type) {
            java.lang.String bio;
            bio = iprot.readString();
            return bio;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCKED:
          if (field.type == LOCKED_FIELD_DESC.type) {
            java.lang.Boolean locked;
            locked = iprot.readBool();
            return locked;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOT:
          if (field.type == BOT_FIELD_DESC.type) {
            java.lang.Boolean bot;
            bot = iprot.readBool();
            return bot;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DISCOVERABLE:
          if (field.type == DISCOVERABLE_FIELD_DESC.type) {
            java.lang.Boolean discoverable;
            discoverable = iprot.readBool();
            return discoverable;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HEADER:
          if (field.type == HEADER_FIELD_DESC.type) {
            AttachmentWithId header;
            header = new AttachmentWithId();
            header.read(iprot);
            return header;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AVATAR:
          if (field.type == AVATAR_FIELD_DESC.type) {
            AttachmentWithId avatar;
            avatar = new AttachmentWithId();
            avatar.read(iprot);
            return avatar;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FIELDS:
          if (field.type == FIELDS_FIELD_DESC.type) {
            java.util.List<KeyValuePair> fields;
            {
              org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
              fields = new java.util.ArrayList<KeyValuePair>(_list36.size);
              @org.apache.thrift.annotation.Nullable KeyValuePair _elem37;
              for (int _i38 = 0; _i38 < _list36.size; ++_i38)
              {
                _elem37 = new KeyValuePair();
                _elem37.read(iprot);
                fields.add(_elem37);
              }
              iprot.readListEnd();
            }
            return fields;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MARKERS:
          if (field.type == MARKERS_FIELD_DESC.type) {
            java.util.Map<java.lang.String,Marker> markers;
            {
              org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
              markers = new java.util.HashMap<java.lang.String,Marker>(2*_map39.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key40;
              @org.apache.thrift.annotation.Nullable Marker _val41;
              for (int _i42 = 0; _i42 < _map39.size; ++_i42)
              {
                _key40 = iprot.readString();
                _val41 = new Marker();
                _val41.read(iprot);
                markers.put(_key40, _val41);
              }
              iprot.readMapEnd();
            }
            return markers;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PREFERENCES:
          if (field.type == PREFERENCES_FIELD_DESC.type) {
            java.util.Map<java.lang.String,java.lang.String> preferences;
            {
              org.apache.thrift.protocol.TMap _map43 = iprot.readMapBegin();
              preferences = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map43.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key44;
              @org.apache.thrift.annotation.Nullable java.lang.String _val45;
              for (int _i46 = 0; _i46 < _map43.size; ++_i46)
              {
                _key44 = iprot.readString();
                _val45 = iprot.readString();
                preferences.put(_key44, _val45);
              }
              iprot.readMapEnd();
            }
            return preferences;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EMAIL:
        java.lang.String email = (java.lang.String)value_;
        oprot.writeString(email);
        return;
      case PWD_HASH:
        java.lang.String pwdHash = (java.lang.String)value_;
        oprot.writeString(pwdHash);
        return;
      case LOCALE:
        java.lang.String locale = (java.lang.String)value_;
        oprot.writeString(locale);
        return;
      case PUBLIC_KEY:
        java.lang.String publicKey = (java.lang.String)value_;
        oprot.writeString(publicKey);
        return;
      case CONTENT:
        AccountContent content = (AccountContent)value_;
        content.write(oprot);
        return;
      case DISPLAY_NAME:
        java.lang.String displayName = (java.lang.String)value_;
        oprot.writeString(displayName);
        return;
      case BIO:
        java.lang.String bio = (java.lang.String)value_;
        oprot.writeString(bio);
        return;
      case LOCKED:
        java.lang.Boolean locked = (java.lang.Boolean)value_;
        oprot.writeBool(locked);
        return;
      case BOT:
        java.lang.Boolean bot = (java.lang.Boolean)value_;
        oprot.writeBool(bot);
        return;
      case DISCOVERABLE:
        java.lang.Boolean discoverable = (java.lang.Boolean)value_;
        oprot.writeBool(discoverable);
        return;
      case HEADER:
        AttachmentWithId header = (AttachmentWithId)value_;
        header.write(oprot);
        return;
      case AVATAR:
        AttachmentWithId avatar = (AttachmentWithId)value_;
        avatar.write(oprot);
        return;
      case FIELDS:
        java.util.List<KeyValuePair> fields = (java.util.List<KeyValuePair>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, fields.size()));
          for (KeyValuePair _iter47 : fields)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case MARKERS:
        java.util.Map<java.lang.String,Marker> markers = (java.util.Map<java.lang.String,Marker>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, markers.size()));
          for (java.util.Map.Entry<java.lang.String, Marker> _iter48 : markers.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            _iter48.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case PREFERENCES:
        java.util.Map<java.lang.String,java.lang.String> preferences = (java.util.Map<java.lang.String,java.lang.String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, preferences.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter49 : preferences.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeString(_iter49.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case EMAIL:
          java.lang.String email;
          email = iprot.readString();
          return email;
        case PWD_HASH:
          java.lang.String pwdHash;
          pwdHash = iprot.readString();
          return pwdHash;
        case LOCALE:
          java.lang.String locale;
          locale = iprot.readString();
          return locale;
        case PUBLIC_KEY:
          java.lang.String publicKey;
          publicKey = iprot.readString();
          return publicKey;
        case CONTENT:
          AccountContent content;
          content = new AccountContent();
          content.read(iprot);
          return content;
        case DISPLAY_NAME:
          java.lang.String displayName;
          displayName = iprot.readString();
          return displayName;
        case BIO:
          java.lang.String bio;
          bio = iprot.readString();
          return bio;
        case LOCKED:
          java.lang.Boolean locked;
          locked = iprot.readBool();
          return locked;
        case BOT:
          java.lang.Boolean bot;
          bot = iprot.readBool();
          return bot;
        case DISCOVERABLE:
          java.lang.Boolean discoverable;
          discoverable = iprot.readBool();
          return discoverable;
        case HEADER:
          AttachmentWithId header;
          header = new AttachmentWithId();
          header.read(iprot);
          return header;
        case AVATAR:
          AttachmentWithId avatar;
          avatar = new AttachmentWithId();
          avatar.read(iprot);
          return avatar;
        case FIELDS:
          java.util.List<KeyValuePair> fields;
          {
            org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
            fields = new java.util.ArrayList<KeyValuePair>(_list50.size);
            @org.apache.thrift.annotation.Nullable KeyValuePair _elem51;
            for (int _i52 = 0; _i52 < _list50.size; ++_i52)
            {
              _elem51 = new KeyValuePair();
              _elem51.read(iprot);
              fields.add(_elem51);
            }
            iprot.readListEnd();
          }
          return fields;
        case MARKERS:
          java.util.Map<java.lang.String,Marker> markers;
          {
            org.apache.thrift.protocol.TMap _map53 = iprot.readMapBegin();
            markers = new java.util.HashMap<java.lang.String,Marker>(2*_map53.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key54;
            @org.apache.thrift.annotation.Nullable Marker _val55;
            for (int _i56 = 0; _i56 < _map53.size; ++_i56)
            {
              _key54 = iprot.readString();
              _val55 = new Marker();
              _val55.read(iprot);
              markers.put(_key54, _val55);
            }
            iprot.readMapEnd();
          }
          return markers;
        case PREFERENCES:
          java.util.Map<java.lang.String,java.lang.String> preferences;
          {
            org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin();
            preferences = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map57.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key58;
            @org.apache.thrift.annotation.Nullable java.lang.String _val59;
            for (int _i60 = 0; _i60 < _map57.size; ++_i60)
            {
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              preferences.put(_key58, _val59);
            }
            iprot.readMapEnd();
          }
          return preferences;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EMAIL:
        java.lang.String email = (java.lang.String)value_;
        oprot.writeString(email);
        return;
      case PWD_HASH:
        java.lang.String pwdHash = (java.lang.String)value_;
        oprot.writeString(pwdHash);
        return;
      case LOCALE:
        java.lang.String locale = (java.lang.String)value_;
        oprot.writeString(locale);
        return;
      case PUBLIC_KEY:
        java.lang.String publicKey = (java.lang.String)value_;
        oprot.writeString(publicKey);
        return;
      case CONTENT:
        AccountContent content = (AccountContent)value_;
        content.write(oprot);
        return;
      case DISPLAY_NAME:
        java.lang.String displayName = (java.lang.String)value_;
        oprot.writeString(displayName);
        return;
      case BIO:
        java.lang.String bio = (java.lang.String)value_;
        oprot.writeString(bio);
        return;
      case LOCKED:
        java.lang.Boolean locked = (java.lang.Boolean)value_;
        oprot.writeBool(locked);
        return;
      case BOT:
        java.lang.Boolean bot = (java.lang.Boolean)value_;
        oprot.writeBool(bot);
        return;
      case DISCOVERABLE:
        java.lang.Boolean discoverable = (java.lang.Boolean)value_;
        oprot.writeBool(discoverable);
        return;
      case HEADER:
        AttachmentWithId header = (AttachmentWithId)value_;
        header.write(oprot);
        return;
      case AVATAR:
        AttachmentWithId avatar = (AttachmentWithId)value_;
        avatar.write(oprot);
        return;
      case FIELDS:
        java.util.List<KeyValuePair> fields = (java.util.List<KeyValuePair>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, fields.size()));
          for (KeyValuePair _iter61 : fields)
          {
            _iter61.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case MARKERS:
        java.util.Map<java.lang.String,Marker> markers = (java.util.Map<java.lang.String,Marker>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, markers.size()));
          for (java.util.Map.Entry<java.lang.String, Marker> _iter62 : markers.entrySet())
          {
            oprot.writeString(_iter62.getKey());
            _iter62.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case PREFERENCES:
        java.util.Map<java.lang.String,java.lang.String> preferences = (java.util.Map<java.lang.String,java.lang.String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, preferences.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter63 : preferences.entrySet())
          {
            oprot.writeString(_iter63.getKey());
            oprot.writeString(_iter63.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case EMAIL:
        return EMAIL_FIELD_DESC;
      case PWD_HASH:
        return PWD_HASH_FIELD_DESC;
      case LOCALE:
        return LOCALE_FIELD_DESC;
      case PUBLIC_KEY:
        return PUBLIC_KEY_FIELD_DESC;
      case CONTENT:
        return CONTENT_FIELD_DESC;
      case DISPLAY_NAME:
        return DISPLAY_NAME_FIELD_DESC;
      case BIO:
        return BIO_FIELD_DESC;
      case LOCKED:
        return LOCKED_FIELD_DESC;
      case BOT:
        return BOT_FIELD_DESC;
      case DISCOVERABLE:
        return DISCOVERABLE_FIELD_DESC;
      case HEADER:
        return HEADER_FIELD_DESC;
      case AVATAR:
        return AVATAR_FIELD_DESC;
      case FIELDS:
        return FIELDS_FIELD_DESC;
      case MARKERS:
        return MARKERS_FIELD_DESC;
      case PREFERENCES:
        return PREFERENCES_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public java.lang.String getEmail() {
    if (getSetField() == _Fields.EMAIL) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'email' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEmail(java.lang.String value) {
    setField_ = _Fields.EMAIL;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.EMAIL");
  }

  public java.lang.String getPwdHash() {
    if (getSetField() == _Fields.PWD_HASH) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'pwdHash' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPwdHash(java.lang.String value) {
    setField_ = _Fields.PWD_HASH;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.PWD_HASH");
  }

  public java.lang.String getLocale() {
    if (getSetField() == _Fields.LOCALE) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'locale' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLocale(java.lang.String value) {
    setField_ = _Fields.LOCALE;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.LOCALE");
  }

  public java.lang.String getPublicKey() {
    if (getSetField() == _Fields.PUBLIC_KEY) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'publicKey' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPublicKey(java.lang.String value) {
    setField_ = _Fields.PUBLIC_KEY;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.PUBLIC_KEY");
  }

  public AccountContent getContent() {
    if (getSetField() == _Fields.CONTENT) {
      return (AccountContent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'content' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContent(AccountContent value) {
    setField_ = _Fields.CONTENT;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.CONTENT");
  }

  public java.lang.String getDisplayName() {
    if (getSetField() == _Fields.DISPLAY_NAME) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'displayName' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDisplayName(java.lang.String value) {
    setField_ = _Fields.DISPLAY_NAME;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.DISPLAY_NAME");
  }

  public java.lang.String getBio() {
    if (getSetField() == _Fields.BIO) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'bio' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBio(java.lang.String value) {
    setField_ = _Fields.BIO;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.BIO");
  }

  public boolean getLocked() {
    if (getSetField() == _Fields.LOCKED) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'locked' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLocked(boolean value) {
    setField_ = _Fields.LOCKED;
    value_ = value;
  }

  public boolean getBot() {
    if (getSetField() == _Fields.BOT) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'bot' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBot(boolean value) {
    setField_ = _Fields.BOT;
    value_ = value;
  }

  public boolean getDiscoverable() {
    if (getSetField() == _Fields.DISCOVERABLE) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'discoverable' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDiscoverable(boolean value) {
    setField_ = _Fields.DISCOVERABLE;
    value_ = value;
  }

  public AttachmentWithId getHeader() {
    if (getSetField() == _Fields.HEADER) {
      return (AttachmentWithId)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'header' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHeader(AttachmentWithId value) {
    setField_ = _Fields.HEADER;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.HEADER");
  }

  public AttachmentWithId getAvatar() {
    if (getSetField() == _Fields.AVATAR) {
      return (AttachmentWithId)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'avatar' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAvatar(AttachmentWithId value) {
    setField_ = _Fields.AVATAR;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.AVATAR");
  }

  public java.util.List<KeyValuePair> getFields() {
    if (getSetField() == _Fields.FIELDS) {
      return (java.util.List<KeyValuePair>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'fields' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFields(java.util.List<KeyValuePair> value) {
    setField_ = _Fields.FIELDS;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.FIELDS");
  }

  public java.util.Map<java.lang.String,Marker> getMarkers() {
    if (getSetField() == _Fields.MARKERS) {
      return (java.util.Map<java.lang.String,Marker>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'markers' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMarkers(java.util.Map<java.lang.String,Marker> value) {
    setField_ = _Fields.MARKERS;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.MARKERS");
  }

  public java.util.Map<java.lang.String,java.lang.String> getPreferences() {
    if (getSetField() == _Fields.PREFERENCES) {
      return (java.util.Map<java.lang.String,java.lang.String>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'preferences' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPreferences(java.util.Map<java.lang.String,java.lang.String> value) {
    setField_ = _Fields.PREFERENCES;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.PREFERENCES");
  }

  public boolean isSetEmail() {
    return setField_ == _Fields.EMAIL;
  }


  public boolean isSetPwdHash() {
    return setField_ == _Fields.PWD_HASH;
  }


  public boolean isSetLocale() {
    return setField_ == _Fields.LOCALE;
  }


  public boolean isSetPublicKey() {
    return setField_ == _Fields.PUBLIC_KEY;
  }


  public boolean isSetContent() {
    return setField_ == _Fields.CONTENT;
  }


  public boolean isSetDisplayName() {
    return setField_ == _Fields.DISPLAY_NAME;
  }


  public boolean isSetBio() {
    return setField_ == _Fields.BIO;
  }


  public boolean isSetLocked() {
    return setField_ == _Fields.LOCKED;
  }


  public boolean isSetBot() {
    return setField_ == _Fields.BOT;
  }


  public boolean isSetDiscoverable() {
    return setField_ == _Fields.DISCOVERABLE;
  }


  public boolean isSetHeader() {
    return setField_ == _Fields.HEADER;
  }


  public boolean isSetAvatar() {
    return setField_ == _Fields.AVATAR;
  }


  public boolean isSetFields() {
    return setField_ == _Fields.FIELDS;
  }


  public boolean isSetMarkers() {
    return setField_ == _Fields.MARKERS;
  }


  public boolean isSetPreferences() {
    return setField_ == _Fields.PREFERENCES;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof EditAccountField) {
      return equals((EditAccountField)other);
    } else {
      return false;
    }
  }

  public boolean equals(EditAccountField other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(EditAccountField other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
