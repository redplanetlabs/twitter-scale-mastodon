/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IndexedAccountWithId implements org.apache.thrift.TBase<IndexedAccountWithId, IndexedAccountWithId._Fields>, java.io.Serializable, Cloneable, Comparable<IndexedAccountWithId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexedAccountWithId");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_WITH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountWithId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IndexedAccountWithIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IndexedAccountWithIdTupleSchemeFactory();

  public long index; // required
  public @org.apache.thrift.annotation.Nullable AccountWithId accountWithId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    ACCOUNT_WITH_ID((short)2, "accountWithId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // ACCOUNT_WITH_ID
          return ACCOUNT_WITH_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Index")));
    tmpMap.put(_Fields.ACCOUNT_WITH_ID, new org.apache.thrift.meta_data.FieldMetaData("accountWithId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountWithId.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexedAccountWithId.class, metaDataMap);
  }

  public IndexedAccountWithId() {
  }

  public IndexedAccountWithId(
    long index,
    AccountWithId accountWithId)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.accountWithId = accountWithId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexedAccountWithId(IndexedAccountWithId other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index = other.index;
    if (other.isSetAccountWithId()) {
      this.accountWithId = new AccountWithId(other.accountWithId);
    }
  }

  @Override
  public IndexedAccountWithId deepCopy() {
    return new IndexedAccountWithId(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    this.accountWithId = null;
  }

  public long getIndex() {
    return this.index;
  }

  public IndexedAccountWithId setIndex(long index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public AccountWithId getAccountWithId() {
    return this.accountWithId;
  }

  public IndexedAccountWithId setAccountWithId(@org.apache.thrift.annotation.Nullable AccountWithId accountWithId) {
    this.accountWithId = accountWithId;
    return this;
  }

  public void unsetAccountWithId() {
    this.accountWithId = null;
  }

  /** Returns true if field accountWithId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountWithId() {
    return this.accountWithId != null;
  }

  public void setAccountWithIdIsSet(boolean value) {
    if (!value) {
      this.accountWithId = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((java.lang.Long)value);
      }
      break;

    case ACCOUNT_WITH_ID:
      if (value == null) {
        unsetAccountWithId();
      } else {
        setAccountWithId((AccountWithId)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return getIndex();

    case ACCOUNT_WITH_ID:
      return getAccountWithId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case ACCOUNT_WITH_ID:
      return isSetAccountWithId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof IndexedAccountWithId)
      return this.equals((IndexedAccountWithId)that);
    return false;
  }

  public boolean equals(IndexedAccountWithId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_accountWithId = true && this.isSetAccountWithId();
    boolean that_present_accountWithId = true && that.isSetAccountWithId();
    if (this_present_accountWithId || that_present_accountWithId) {
      if (!(this_present_accountWithId && that_present_accountWithId))
        return false;
      if (!this.accountWithId.equals(that.accountWithId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index);

    hashCode = hashCode * 8191 + ((isSetAccountWithId()) ? 131071 : 524287);
    if (isSetAccountWithId())
      hashCode = hashCode * 8191 + accountWithId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IndexedAccountWithId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIndex(), other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAccountWithId(), other.isSetAccountWithId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountWithId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountWithId, other.accountWithId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IndexedAccountWithId(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountWithId:");
    if (this.accountWithId == null) {
      sb.append("null");
    } else {
      sb.append(this.accountWithId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'index' because it's a primitive and you chose the non-beans generator.
    if (accountWithId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountWithId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (accountWithId != null) {
      accountWithId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexedAccountWithIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public IndexedAccountWithIdStandardScheme getScheme() {
      return new IndexedAccountWithIdStandardScheme();
    }
  }

  private static class IndexedAccountWithIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<IndexedAccountWithId> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, IndexedAccountWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index = iprot.readI64();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_WITH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountWithId = new AccountWithId();
              struct.accountWithId.read(iprot);
              struct.setAccountWithIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'index' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, IndexedAccountWithId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI64(struct.index);
      oprot.writeFieldEnd();
      if (struct.accountWithId != null) {
        oprot.writeFieldBegin(ACCOUNT_WITH_ID_FIELD_DESC);
        struct.accountWithId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexedAccountWithIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public IndexedAccountWithIdTupleScheme getScheme() {
      return new IndexedAccountWithIdTupleScheme();
    }
  }

  private static class IndexedAccountWithIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<IndexedAccountWithId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndexedAccountWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.index);
      struct.accountWithId.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndexedAccountWithId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.index = iprot.readI64();
      struct.setIndexIsSet(true);
      struct.accountWithId = new AccountWithId();
      struct.accountWithId.read(iprot);
      struct.setAccountWithIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

