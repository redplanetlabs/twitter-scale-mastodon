/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rpl.mastodon.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AccountRelationshipQueryResult implements org.apache.thrift.TBase<AccountRelationshipQueryResult, AccountRelationshipQueryResult._Fields>, java.io.Serializable, Cloneable, Comparable<AccountRelationshipQueryResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccountRelationshipQueryResult");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("following", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SHOWING_BOOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("showingBoosts", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField NOTIFYING_FIELD_DESC = new org.apache.thrift.protocol.TField("notifying", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField LANGUAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("languages", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField FOLLOWED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("followedBy", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BLOCKING_FIELD_DESC = new org.apache.thrift.protocol.TField("blocking", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCKED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("blockedBy", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MUTING_FIELD_DESC = new org.apache.thrift.protocol.TField("muting", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField MUTING_NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mutingNotifications", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField REQUESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("requested", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DOMAIN_BLOCKING_FIELD_DESC = new org.apache.thrift.protocol.TField("domainBlocking", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField ENDORSED_FIELD_DESC = new org.apache.thrift.protocol.TField("endorsed", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AccountRelationshipQueryResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AccountRelationshipQueryResultTupleSchemeFactory();

  public long accountId; // required
  public boolean following; // required
  public boolean showingBoosts; // required
  public boolean notifying; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> languages; // required
  public boolean followedBy; // required
  public boolean blocking; // required
  public boolean blockedBy; // required
  public boolean muting; // required
  public boolean mutingNotifications; // required
  public boolean requested; // required
  public boolean domainBlocking; // required
  public boolean endorsed; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String note; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    FOLLOWING((short)2, "following"),
    SHOWING_BOOSTS((short)3, "showingBoosts"),
    NOTIFYING((short)4, "notifying"),
    LANGUAGES((short)5, "languages"),
    FOLLOWED_BY((short)6, "followedBy"),
    BLOCKING((short)7, "blocking"),
    BLOCKED_BY((short)8, "blockedBy"),
    MUTING((short)9, "muting"),
    MUTING_NOTIFICATIONS((short)10, "mutingNotifications"),
    REQUESTED((short)11, "requested"),
    DOMAIN_BLOCKING((short)12, "domainBlocking"),
    ENDORSED((short)13, "endorsed"),
    NOTE((short)14, "note");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // FOLLOWING
          return FOLLOWING;
        case 3: // SHOWING_BOOSTS
          return SHOWING_BOOSTS;
        case 4: // NOTIFYING
          return NOTIFYING;
        case 5: // LANGUAGES
          return LANGUAGES;
        case 6: // FOLLOWED_BY
          return FOLLOWED_BY;
        case 7: // BLOCKING
          return BLOCKING;
        case 8: // BLOCKED_BY
          return BLOCKED_BY;
        case 9: // MUTING
          return MUTING;
        case 10: // MUTING_NOTIFICATIONS
          return MUTING_NOTIFICATIONS;
        case 11: // REQUESTED
          return REQUESTED;
        case 12: // DOMAIN_BLOCKING
          return DOMAIN_BLOCKING;
        case 13: // ENDORSED
          return ENDORSED;
        case 14: // NOTE
          return NOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTID_ISSET_ID = 0;
  private static final int __FOLLOWING_ISSET_ID = 1;
  private static final int __SHOWINGBOOSTS_ISSET_ID = 2;
  private static final int __NOTIFYING_ISSET_ID = 3;
  private static final int __FOLLOWEDBY_ISSET_ID = 4;
  private static final int __BLOCKING_ISSET_ID = 5;
  private static final int __BLOCKEDBY_ISSET_ID = 6;
  private static final int __MUTING_ISSET_ID = 7;
  private static final int __MUTINGNOTIFICATIONS_ISSET_ID = 8;
  private static final int __REQUESTED_ISSET_ID = 9;
  private static final int __DOMAINBLOCKING_ISSET_ID = 10;
  private static final int __ENDORSED_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "AccountId")));
    tmpMap.put(_Fields.FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("following", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOWING_BOOSTS, new org.apache.thrift.meta_data.FieldMetaData("showingBoosts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFYING, new org.apache.thrift.meta_data.FieldMetaData("notifying", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LANGUAGES, new org.apache.thrift.meta_data.FieldMetaData("languages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FOLLOWED_BY, new org.apache.thrift.meta_data.FieldMetaData("followedBy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCKING, new org.apache.thrift.meta_data.FieldMetaData("blocking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCKED_BY, new org.apache.thrift.meta_data.FieldMetaData("blockedBy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MUTING, new org.apache.thrift.meta_data.FieldMetaData("muting", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MUTING_NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("mutingNotifications", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUESTED, new org.apache.thrift.meta_data.FieldMetaData("requested", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOMAIN_BLOCKING, new org.apache.thrift.meta_data.FieldMetaData("domainBlocking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENDORSED, new org.apache.thrift.meta_data.FieldMetaData("endorsed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccountRelationshipQueryResult.class, metaDataMap);
  }

  public AccountRelationshipQueryResult() {
  }

  public AccountRelationshipQueryResult(
    long accountId,
    boolean following,
    boolean showingBoosts,
    boolean notifying,
    java.util.List<java.lang.String> languages,
    boolean followedBy,
    boolean blocking,
    boolean blockedBy,
    boolean muting,
    boolean mutingNotifications,
    boolean requested,
    boolean domainBlocking,
    boolean endorsed,
    java.lang.String note)
  {
    this();
    this.accountId = accountId;
    setAccountIdIsSet(true);
    this.following = following;
    setFollowingIsSet(true);
    this.showingBoosts = showingBoosts;
    setShowingBoostsIsSet(true);
    this.notifying = notifying;
    setNotifyingIsSet(true);
    this.languages = languages;
    this.followedBy = followedBy;
    setFollowedByIsSet(true);
    this.blocking = blocking;
    setBlockingIsSet(true);
    this.blockedBy = blockedBy;
    setBlockedByIsSet(true);
    this.muting = muting;
    setMutingIsSet(true);
    this.mutingNotifications = mutingNotifications;
    setMutingNotificationsIsSet(true);
    this.requested = requested;
    setRequestedIsSet(true);
    this.domainBlocking = domainBlocking;
    setDomainBlockingIsSet(true);
    this.endorsed = endorsed;
    setEndorsedIsSet(true);
    this.note = note;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccountRelationshipQueryResult(AccountRelationshipQueryResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accountId = other.accountId;
    this.following = other.following;
    this.showingBoosts = other.showingBoosts;
    this.notifying = other.notifying;
    if (other.isSetLanguages()) {
      java.util.List<java.lang.String> __this__languages = new java.util.ArrayList<java.lang.String>(other.languages);
      this.languages = __this__languages;
    }
    this.followedBy = other.followedBy;
    this.blocking = other.blocking;
    this.blockedBy = other.blockedBy;
    this.muting = other.muting;
    this.mutingNotifications = other.mutingNotifications;
    this.requested = other.requested;
    this.domainBlocking = other.domainBlocking;
    this.endorsed = other.endorsed;
    if (other.isSetNote()) {
      this.note = other.note;
    }
  }

  @Override
  public AccountRelationshipQueryResult deepCopy() {
    return new AccountRelationshipQueryResult(this);
  }

  @Override
  public void clear() {
    setAccountIdIsSet(false);
    this.accountId = 0;
    setFollowingIsSet(false);
    this.following = false;
    setShowingBoostsIsSet(false);
    this.showingBoosts = false;
    setNotifyingIsSet(false);
    this.notifying = false;
    this.languages = null;
    setFollowedByIsSet(false);
    this.followedBy = false;
    setBlockingIsSet(false);
    this.blocking = false;
    setBlockedByIsSet(false);
    this.blockedBy = false;
    setMutingIsSet(false);
    this.muting = false;
    setMutingNotificationsIsSet(false);
    this.mutingNotifications = false;
    setRequestedIsSet(false);
    this.requested = false;
    setDomainBlockingIsSet(false);
    this.domainBlocking = false;
    setEndorsedIsSet(false);
    this.endorsed = false;
    this.note = null;
  }

  public long getAccountId() {
    return this.accountId;
  }

  public AccountRelationshipQueryResult setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public boolean isFollowing() {
    return this.following;
  }

  public AccountRelationshipQueryResult setFollowing(boolean following) {
    this.following = following;
    setFollowingIsSet(true);
    return this;
  }

  public void unsetFollowing() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  /** Returns true if field following is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowing() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  public void setFollowingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLLOWING_ISSET_ID, value);
  }

  public boolean isShowingBoosts() {
    return this.showingBoosts;
  }

  public AccountRelationshipQueryResult setShowingBoosts(boolean showingBoosts) {
    this.showingBoosts = showingBoosts;
    setShowingBoostsIsSet(true);
    return this;
  }

  public void unsetShowingBoosts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOWINGBOOSTS_ISSET_ID);
  }

  /** Returns true if field showingBoosts is set (has been assigned a value) and false otherwise */
  public boolean isSetShowingBoosts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOWINGBOOSTS_ISSET_ID);
  }

  public void setShowingBoostsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOWINGBOOSTS_ISSET_ID, value);
  }

  public boolean isNotifying() {
    return this.notifying;
  }

  public AccountRelationshipQueryResult setNotifying(boolean notifying) {
    this.notifying = notifying;
    setNotifyingIsSet(true);
    return this;
  }

  public void unsetNotifying() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFYING_ISSET_ID);
  }

  /** Returns true if field notifying is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifying() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFYING_ISSET_ID);
  }

  public void setNotifyingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFYING_ISSET_ID, value);
  }

  public int getLanguagesSize() {
    return (this.languages == null) ? 0 : this.languages.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getLanguagesIterator() {
    return (this.languages == null) ? null : this.languages.iterator();
  }

  public void addToLanguages(java.lang.String elem) {
    if (this.languages == null) {
      this.languages = new java.util.ArrayList<java.lang.String>();
    }
    this.languages.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getLanguages() {
    return this.languages;
  }

  public AccountRelationshipQueryResult setLanguages(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> languages) {
    this.languages = languages;
    return this;
  }

  public void unsetLanguages() {
    this.languages = null;
  }

  /** Returns true if field languages is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguages() {
    return this.languages != null;
  }

  public void setLanguagesIsSet(boolean value) {
    if (!value) {
      this.languages = null;
    }
  }

  public boolean isFollowedBy() {
    return this.followedBy;
  }

  public AccountRelationshipQueryResult setFollowedBy(boolean followedBy) {
    this.followedBy = followedBy;
    setFollowedByIsSet(true);
    return this;
  }

  public void unsetFollowedBy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLLOWEDBY_ISSET_ID);
  }

  /** Returns true if field followedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowedBy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLLOWEDBY_ISSET_ID);
  }

  public void setFollowedByIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLLOWEDBY_ISSET_ID, value);
  }

  public boolean isBlocking() {
    return this.blocking;
  }

  public AccountRelationshipQueryResult setBlocking(boolean blocking) {
    this.blocking = blocking;
    setBlockingIsSet(true);
    return this;
  }

  public void unsetBlocking() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKING_ISSET_ID);
  }

  /** Returns true if field blocking is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocking() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKING_ISSET_ID);
  }

  public void setBlockingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKING_ISSET_ID, value);
  }

  public boolean isBlockedBy() {
    return this.blockedBy;
  }

  public AccountRelationshipQueryResult setBlockedBy(boolean blockedBy) {
    this.blockedBy = blockedBy;
    setBlockedByIsSet(true);
    return this;
  }

  public void unsetBlockedBy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKEDBY_ISSET_ID);
  }

  /** Returns true if field blockedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockedBy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKEDBY_ISSET_ID);
  }

  public void setBlockedByIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKEDBY_ISSET_ID, value);
  }

  public boolean isMuting() {
    return this.muting;
  }

  public AccountRelationshipQueryResult setMuting(boolean muting) {
    this.muting = muting;
    setMutingIsSet(true);
    return this;
  }

  public void unsetMuting() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MUTING_ISSET_ID);
  }

  /** Returns true if field muting is set (has been assigned a value) and false otherwise */
  public boolean isSetMuting() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MUTING_ISSET_ID);
  }

  public void setMutingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MUTING_ISSET_ID, value);
  }

  public boolean isMutingNotifications() {
    return this.mutingNotifications;
  }

  public AccountRelationshipQueryResult setMutingNotifications(boolean mutingNotifications) {
    this.mutingNotifications = mutingNotifications;
    setMutingNotificationsIsSet(true);
    return this;
  }

  public void unsetMutingNotifications() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MUTINGNOTIFICATIONS_ISSET_ID);
  }

  /** Returns true if field mutingNotifications is set (has been assigned a value) and false otherwise */
  public boolean isSetMutingNotifications() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MUTINGNOTIFICATIONS_ISSET_ID);
  }

  public void setMutingNotificationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MUTINGNOTIFICATIONS_ISSET_ID, value);
  }

  public boolean isRequested() {
    return this.requested;
  }

  public AccountRelationshipQueryResult setRequested(boolean requested) {
    this.requested = requested;
    setRequestedIsSet(true);
    return this;
  }

  public void unsetRequested() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_ISSET_ID);
  }

  /** Returns true if field requested is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTED_ISSET_ID);
  }

  public void setRequestedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTED_ISSET_ID, value);
  }

  public boolean isDomainBlocking() {
    return this.domainBlocking;
  }

  public AccountRelationshipQueryResult setDomainBlocking(boolean domainBlocking) {
    this.domainBlocking = domainBlocking;
    setDomainBlockingIsSet(true);
    return this;
  }

  public void unsetDomainBlocking() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINBLOCKING_ISSET_ID);
  }

  /** Returns true if field domainBlocking is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainBlocking() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINBLOCKING_ISSET_ID);
  }

  public void setDomainBlockingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINBLOCKING_ISSET_ID, value);
  }

  public boolean isEndorsed() {
    return this.endorsed;
  }

  public AccountRelationshipQueryResult setEndorsed(boolean endorsed) {
    this.endorsed = endorsed;
    setEndorsedIsSet(true);
    return this;
  }

  public void unsetEndorsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDORSED_ISSET_ID);
  }

  /** Returns true if field endorsed is set (has been assigned a value) and false otherwise */
  public boolean isSetEndorsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDORSED_ISSET_ID);
  }

  public void setEndorsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDORSED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNote() {
    return this.note;
  }

  public AccountRelationshipQueryResult setNote(@org.apache.thrift.annotation.Nullable java.lang.String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((java.lang.Long)value);
      }
      break;

    case FOLLOWING:
      if (value == null) {
        unsetFollowing();
      } else {
        setFollowing((java.lang.Boolean)value);
      }
      break;

    case SHOWING_BOOSTS:
      if (value == null) {
        unsetShowingBoosts();
      } else {
        setShowingBoosts((java.lang.Boolean)value);
      }
      break;

    case NOTIFYING:
      if (value == null) {
        unsetNotifying();
      } else {
        setNotifying((java.lang.Boolean)value);
      }
      break;

    case LANGUAGES:
      if (value == null) {
        unsetLanguages();
      } else {
        setLanguages((java.util.List<java.lang.String>)value);
      }
      break;

    case FOLLOWED_BY:
      if (value == null) {
        unsetFollowedBy();
      } else {
        setFollowedBy((java.lang.Boolean)value);
      }
      break;

    case BLOCKING:
      if (value == null) {
        unsetBlocking();
      } else {
        setBlocking((java.lang.Boolean)value);
      }
      break;

    case BLOCKED_BY:
      if (value == null) {
        unsetBlockedBy();
      } else {
        setBlockedBy((java.lang.Boolean)value);
      }
      break;

    case MUTING:
      if (value == null) {
        unsetMuting();
      } else {
        setMuting((java.lang.Boolean)value);
      }
      break;

    case MUTING_NOTIFICATIONS:
      if (value == null) {
        unsetMutingNotifications();
      } else {
        setMutingNotifications((java.lang.Boolean)value);
      }
      break;

    case REQUESTED:
      if (value == null) {
        unsetRequested();
      } else {
        setRequested((java.lang.Boolean)value);
      }
      break;

    case DOMAIN_BLOCKING:
      if (value == null) {
        unsetDomainBlocking();
      } else {
        setDomainBlocking((java.lang.Boolean)value);
      }
      break;

    case ENDORSED:
      if (value == null) {
        unsetEndorsed();
      } else {
        setEndorsed((java.lang.Boolean)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return getAccountId();

    case FOLLOWING:
      return isFollowing();

    case SHOWING_BOOSTS:
      return isShowingBoosts();

    case NOTIFYING:
      return isNotifying();

    case LANGUAGES:
      return getLanguages();

    case FOLLOWED_BY:
      return isFollowedBy();

    case BLOCKING:
      return isBlocking();

    case BLOCKED_BY:
      return isBlockedBy();

    case MUTING:
      return isMuting();

    case MUTING_NOTIFICATIONS:
      return isMutingNotifications();

    case REQUESTED:
      return isRequested();

    case DOMAIN_BLOCKING:
      return isDomainBlocking();

    case ENDORSED:
      return isEndorsed();

    case NOTE:
      return getNote();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case FOLLOWING:
      return isSetFollowing();
    case SHOWING_BOOSTS:
      return isSetShowingBoosts();
    case NOTIFYING:
      return isSetNotifying();
    case LANGUAGES:
      return isSetLanguages();
    case FOLLOWED_BY:
      return isSetFollowedBy();
    case BLOCKING:
      return isSetBlocking();
    case BLOCKED_BY:
      return isSetBlockedBy();
    case MUTING:
      return isSetMuting();
    case MUTING_NOTIFICATIONS:
      return isSetMutingNotifications();
    case REQUESTED:
      return isSetRequested();
    case DOMAIN_BLOCKING:
      return isSetDomainBlocking();
    case ENDORSED:
      return isSetEndorsed();
    case NOTE:
      return isSetNote();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AccountRelationshipQueryResult)
      return this.equals((AccountRelationshipQueryResult)that);
    return false;
  }

  public boolean equals(AccountRelationshipQueryResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accountId = true;
    boolean that_present_accountId = true;
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_following = true;
    boolean that_present_following = true;
    if (this_present_following || that_present_following) {
      if (!(this_present_following && that_present_following))
        return false;
      if (this.following != that.following)
        return false;
    }

    boolean this_present_showingBoosts = true;
    boolean that_present_showingBoosts = true;
    if (this_present_showingBoosts || that_present_showingBoosts) {
      if (!(this_present_showingBoosts && that_present_showingBoosts))
        return false;
      if (this.showingBoosts != that.showingBoosts)
        return false;
    }

    boolean this_present_notifying = true;
    boolean that_present_notifying = true;
    if (this_present_notifying || that_present_notifying) {
      if (!(this_present_notifying && that_present_notifying))
        return false;
      if (this.notifying != that.notifying)
        return false;
    }

    boolean this_present_languages = true && this.isSetLanguages();
    boolean that_present_languages = true && that.isSetLanguages();
    if (this_present_languages || that_present_languages) {
      if (!(this_present_languages && that_present_languages))
        return false;
      if (!this.languages.equals(that.languages))
        return false;
    }

    boolean this_present_followedBy = true;
    boolean that_present_followedBy = true;
    if (this_present_followedBy || that_present_followedBy) {
      if (!(this_present_followedBy && that_present_followedBy))
        return false;
      if (this.followedBy != that.followedBy)
        return false;
    }

    boolean this_present_blocking = true;
    boolean that_present_blocking = true;
    if (this_present_blocking || that_present_blocking) {
      if (!(this_present_blocking && that_present_blocking))
        return false;
      if (this.blocking != that.blocking)
        return false;
    }

    boolean this_present_blockedBy = true;
    boolean that_present_blockedBy = true;
    if (this_present_blockedBy || that_present_blockedBy) {
      if (!(this_present_blockedBy && that_present_blockedBy))
        return false;
      if (this.blockedBy != that.blockedBy)
        return false;
    }

    boolean this_present_muting = true;
    boolean that_present_muting = true;
    if (this_present_muting || that_present_muting) {
      if (!(this_present_muting && that_present_muting))
        return false;
      if (this.muting != that.muting)
        return false;
    }

    boolean this_present_mutingNotifications = true;
    boolean that_present_mutingNotifications = true;
    if (this_present_mutingNotifications || that_present_mutingNotifications) {
      if (!(this_present_mutingNotifications && that_present_mutingNotifications))
        return false;
      if (this.mutingNotifications != that.mutingNotifications)
        return false;
    }

    boolean this_present_requested = true;
    boolean that_present_requested = true;
    if (this_present_requested || that_present_requested) {
      if (!(this_present_requested && that_present_requested))
        return false;
      if (this.requested != that.requested)
        return false;
    }

    boolean this_present_domainBlocking = true;
    boolean that_present_domainBlocking = true;
    if (this_present_domainBlocking || that_present_domainBlocking) {
      if (!(this_present_domainBlocking && that_present_domainBlocking))
        return false;
      if (this.domainBlocking != that.domainBlocking)
        return false;
    }

    boolean this_present_endorsed = true;
    boolean that_present_endorsed = true;
    if (this_present_endorsed || that_present_endorsed) {
      if (!(this_present_endorsed && that_present_endorsed))
        return false;
      if (this.endorsed != that.endorsed)
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accountId);

    hashCode = hashCode * 8191 + ((following) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((showingBoosts) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((notifying) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLanguages()) ? 131071 : 524287);
    if (isSetLanguages())
      hashCode = hashCode * 8191 + languages.hashCode();

    hashCode = hashCode * 8191 + ((followedBy) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((blocking) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((blockedBy) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((muting) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((mutingNotifications) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((requested) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((domainBlocking) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((endorsed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
    if (isSetNote())
      hashCode = hashCode * 8191 + note.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AccountRelationshipQueryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAccountId(), other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFollowing(), other.isSetFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.following, other.following);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShowingBoosts(), other.isSetShowingBoosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowingBoosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showingBoosts, other.showingBoosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNotifying(), other.isSetNotifying());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifying()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifying, other.notifying);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLanguages(), other.isSetLanguages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languages, other.languages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFollowedBy(), other.isSetFollowedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followedBy, other.followedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlocking(), other.isSetBlocking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocking, other.blocking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlockedBy(), other.isSetBlockedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockedBy, other.blockedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMuting(), other.isSetMuting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMuting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.muting, other.muting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMutingNotifications(), other.isSetMutingNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutingNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutingNotifications, other.mutingNotifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequested(), other.isSetRequested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested, other.requested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDomainBlocking(), other.isSetDomainBlocking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainBlocking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainBlocking, other.domainBlocking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndorsed(), other.isSetEndorsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndorsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endorsed, other.endorsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNote(), other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AccountRelationshipQueryResult(");
    boolean first = true;

    sb.append("accountId:");
    sb.append(this.accountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("following:");
    sb.append(this.following);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showingBoosts:");
    sb.append(this.showingBoosts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifying:");
    sb.append(this.notifying);
    first = false;
    if (!first) sb.append(", ");
    sb.append("languages:");
    if (this.languages == null) {
      sb.append("null");
    } else {
      sb.append(this.languages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followedBy:");
    sb.append(this.followedBy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocking:");
    sb.append(this.blocking);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockedBy:");
    sb.append(this.blockedBy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("muting:");
    sb.append(this.muting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mutingNotifications:");
    sb.append(this.mutingNotifications);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requested:");
    sb.append(this.requested);
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainBlocking:");
    sb.append(this.domainBlocking);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endorsed:");
    sb.append(this.endorsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'accountId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'following' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'showingBoosts' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'notifying' because it's a primitive and you chose the non-beans generator.
    if (languages == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'languages' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'followedBy' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'blocking' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'blockedBy' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'muting' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mutingNotifications' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'requested' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'domainBlocking' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endorsed' because it's a primitive and you chose the non-beans generator.
    if (note == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'note' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccountRelationshipQueryResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountRelationshipQueryResultStandardScheme getScheme() {
      return new AccountRelationshipQueryResultStandardScheme();
    }
  }

  private static class AccountRelationshipQueryResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AccountRelationshipQueryResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AccountRelationshipQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOLLOWING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.following = iprot.readBool();
              struct.setFollowingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOWING_BOOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showingBoosts = iprot.readBool();
              struct.setShowingBoostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTIFYING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notifying = iprot.readBool();
              struct.setNotifyingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANGUAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list246 = iprot.readListBegin();
                struct.languages = new java.util.ArrayList<java.lang.String>(_list246.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem247;
                for (int _i248 = 0; _i248 < _list246.size; ++_i248)
                {
                  _elem247 = iprot.readString();
                  struct.languages.add(_elem247);
                }
                iprot.readListEnd();
              }
              struct.setLanguagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOLLOWED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.followedBy = iprot.readBool();
              struct.setFollowedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOCKING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.blocking = iprot.readBool();
              struct.setBlockingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCKED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.blockedBy = iprot.readBool();
              struct.setBlockedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MUTING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.muting = iprot.readBool();
              struct.setMutingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MUTING_NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mutingNotifications = iprot.readBool();
              struct.setMutingNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requested = iprot.readBool();
              struct.setRequestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DOMAIN_BLOCKING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.domainBlocking = iprot.readBool();
              struct.setDomainBlockingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENDORSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.endorsed = iprot.readBool();
              struct.setEndorsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAccountId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFollowing()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'following' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetShowingBoosts()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'showingBoosts' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNotifying()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notifying' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFollowedBy()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'followedBy' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBlocking()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocking' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBlockedBy()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockedBy' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMuting()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'muting' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMutingNotifications()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mutingNotifications' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRequested()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requested' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDomainBlocking()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainBlocking' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndorsed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endorsed' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AccountRelationshipQueryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.accountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWING_FIELD_DESC);
      oprot.writeBool(struct.following);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOWING_BOOSTS_FIELD_DESC);
      oprot.writeBool(struct.showingBoosts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFYING_FIELD_DESC);
      oprot.writeBool(struct.notifying);
      oprot.writeFieldEnd();
      if (struct.languages != null) {
        oprot.writeFieldBegin(LANGUAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.languages.size()));
          for (java.lang.String _iter249 : struct.languages)
          {
            oprot.writeString(_iter249);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FOLLOWED_BY_FIELD_DESC);
      oprot.writeBool(struct.followedBy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKING_FIELD_DESC);
      oprot.writeBool(struct.blocking);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKED_BY_FIELD_DESC);
      oprot.writeBool(struct.blockedBy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUTING_FIELD_DESC);
      oprot.writeBool(struct.muting);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MUTING_NOTIFICATIONS_FIELD_DESC);
      oprot.writeBool(struct.mutingNotifications);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUESTED_FIELD_DESC);
      oprot.writeBool(struct.requested);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOMAIN_BLOCKING_FIELD_DESC);
      oprot.writeBool(struct.domainBlocking);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDORSED_FIELD_DESC);
      oprot.writeBool(struct.endorsed);
      oprot.writeFieldEnd();
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccountRelationshipQueryResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AccountRelationshipQueryResultTupleScheme getScheme() {
      return new AccountRelationshipQueryResultTupleScheme();
    }
  }

  private static class AccountRelationshipQueryResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AccountRelationshipQueryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccountRelationshipQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.accountId);
      oprot.writeBool(struct.following);
      oprot.writeBool(struct.showingBoosts);
      oprot.writeBool(struct.notifying);
      {
        oprot.writeI32(struct.languages.size());
        for (java.lang.String _iter250 : struct.languages)
        {
          oprot.writeString(_iter250);
        }
      }
      oprot.writeBool(struct.followedBy);
      oprot.writeBool(struct.blocking);
      oprot.writeBool(struct.blockedBy);
      oprot.writeBool(struct.muting);
      oprot.writeBool(struct.mutingNotifications);
      oprot.writeBool(struct.requested);
      oprot.writeBool(struct.domainBlocking);
      oprot.writeBool(struct.endorsed);
      oprot.writeString(struct.note);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccountRelationshipQueryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.accountId = iprot.readI64();
      struct.setAccountIdIsSet(true);
      struct.following = iprot.readBool();
      struct.setFollowingIsSet(true);
      struct.showingBoosts = iprot.readBool();
      struct.setShowingBoostsIsSet(true);
      struct.notifying = iprot.readBool();
      struct.setNotifyingIsSet(true);
      {
        org.apache.thrift.protocol.TList _list251 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.languages = new java.util.ArrayList<java.lang.String>(_list251.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem252;
        for (int _i253 = 0; _i253 < _list251.size; ++_i253)
        {
          _elem252 = iprot.readString();
          struct.languages.add(_elem252);
        }
      }
      struct.setLanguagesIsSet(true);
      struct.followedBy = iprot.readBool();
      struct.setFollowedByIsSet(true);
      struct.blocking = iprot.readBool();
      struct.setBlockingIsSet(true);
      struct.blockedBy = iprot.readBool();
      struct.setBlockedByIsSet(true);
      struct.muting = iprot.readBool();
      struct.setMutingIsSet(true);
      struct.mutingNotifications = iprot.readBool();
      struct.setMutingNotificationsIsSet(true);
      struct.requested = iprot.readBool();
      struct.setRequestedIsSet(true);
      struct.domainBlocking = iprot.readBool();
      struct.setDomainBlockingIsSet(true);
      struct.endorsed = iprot.readBool();
      struct.setEndorsedIsSet(true);
      struct.note = iprot.readString();
      struct.setNoteIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

